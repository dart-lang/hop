{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterator","id":"Iterator","comment":"\nAn interface for getting items, one at a time, from an object.\n\nThe for-in construct transparently uses Iterator to test for the end\nof the iteration, and to get each item (or _element_).\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\nThe Iterator is initially positioned before the first element. Before\naccessing the first element the iterator must thus be advanced ([moveNext])\nto point to the first element. If no element is left, then [moveNext]\nreturns false.\n\nA typical usage of an Iterator looks as follows:\n\n    var it = obj.iterator;\n    while (it.moveNext()) {\n      use(it.current);\n    }\n\n**See also:** [Iteration]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-iteration)\nin the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html)\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","comment":"\nMoves to the next element. Returns true if [current] contains the next\nelement. Returns false, if no element was left.\n\nIt is safe to invoke [moveNext] even when the iterator is already\npositioned after the last element. In this case [moveNext] has no effect.\n","line":"41"},{"ref":{"name":"E","refId":"dart.core/Iterator/E"},"kind":"property","name":"current","id":"current","comment":"\nReturns the current element.\n\nReturn [:null:] if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n[Iterable].\n","line":"50"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterator.dart","line":"33"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterable","id":"Iterable","comment":"\nAn object that uses an [Iterator] to serve objects one at a time.\n\nYou can iterate over all objects served by an Iterable object\nusing the for-in loop construct.\nFor example, you can iterate over all of the keys in a [Map],\nbecause Map keys are iterable.\n\n    Map kidsBooks = {'Matilda': 'Roald Dahl',\n                     'Green Eggs and Ham': 'Dr Seuss',\n                     'Where the Wild Things Are': 'Maurice Sendak'};\n    for (var book in kidsBooks.keys) {\n      print('$book was written by ${kidsBooks[book]}');\n    }\n\nThe [List] class and the [Set] class implement this interface,\nas do classes in the [dart:collection](#dart-collection) library.\n\nYou can implement Iterable in your own class.\nIf you do, then an instance of your Iterable class\ncan be the right-hand side of a for-in construct.\n\nSome subclasss of `Iterable` can be modified. It is generally not allowed\nto modify such collections while they are being iterated. Doing so will break\nthe iteration, which is typically signalled by throwing a\n[ConcurrentModificationError] when it is detected.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"66"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"66"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"where","id":"where1()","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"78"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"78"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","comment":"\nExpands each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable runs through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and calls [f] for each element\nof this every time it's iterated.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"89"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"89"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true if the collection contains an element equal to [element].\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"94"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies the function [f] to each element of this collection.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"99"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"99"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"reduce","id":"reduce1()","comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"110"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"110"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"110"},{"kind":"method","name":"fold","id":"fold2()","comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"126"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"126"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}],"line":"126"}],"line":"125"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"132"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"132"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"141"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"151"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"151"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toList","id":"toList1()","comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements are in iteration order. The list is fixed-length\nif [growable] is false.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"159"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toSet","id":"toSet0()","comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","line":"164"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"take","id":"take1()","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"192"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\nReturns an Iterable that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it does not\nget or provide any more elements.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"204"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"204"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\nReturns an Iterable that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting Iterable is\nempty.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"214"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\nReturns an Iterable that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"228"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"228"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"259"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"259"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"268"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"268"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"274"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"274"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"285"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"property","name":"iterator","id":"iterator","comment":"\nReturns an Iterator that iterates over this Iterable object.\n","line":"54"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","line":"172"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no element in this collection.\n","line":"177"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one element in this collection.\n","line":"182"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"first","id":"first","comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"236"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"last","id":"last","comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","line":"243"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"single","id":"single","comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","line":"250"},{"kind":"constructor","name":"","id":"0()","line":"35"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"constructor","name":"generate","id":"generate2()","comment":"\nCreates an Iterable that generates its elements dynamically.\n\nThe Iterators created by the Iterable count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an Iterable, [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"47"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"47"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/iterable.dart","line":"34"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"dart:collection","id":"dart.collection","comment":"\nClasses and utilities that supplement the collection support in dart:core.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]}],"kind":"class","name":"IterableBase","id":"IterableBase","comment":"\nBase class for implementing [Iterable].\n\nThis class implements all methods of [Iterable] except [Iterable.iterator]\nin terms of `iterator`.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"207"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"207"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"209"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"209"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"211"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"211"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"214"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"221"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"221"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"225"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"225"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"225"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"238"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"238"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}],"line":"238"}],"line":"237"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"244"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"244"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"251"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"269"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"269"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"276"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"279"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"295"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"299"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"299"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"303"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"307"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"307"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"339"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"339"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"347"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"347"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"361"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"361"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"377"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of (some of) the elements of `this`.\n\nElements are represented by their own `toString` results.\n\nThe representation always contains the first three elements.\nIf there are less than a hundred elements in the iterable, it also\ncontains the last two elements.\n\nIf the resulting string isn't above 80 characters, more elements are\nincluded from the start of the iterable.\n\nThe conversion may omit calling `toString` on some elements if they\nare known to now occur in the output, and it may stop iterating after\na hundred elements.\n","line":"403"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"281"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"291"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"293"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"first","id":"first","line":"311"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"last","id":"last","line":"319"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"single","id":"single","line":"331"},{"kind":"constructor","name":"","id":"0()","line":"205"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/iterable.dart","line":"202"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/collection/collection.dart","line":"8"},{"kind":"library","name":"dart:async","id":"dart.async","comment":"\nSupport for asynchronous programming,\nwith classes such as Future and Stream.\n\nFor an introduction to asynchronous programming in Dart, see the\n[dart:async section of the language tour]\n(https://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-asynchronous-programming).\n\n## Other resources\n\n* [Using Future Based APIs]\n(https://www.dartlang.org/articles/using-future-based-apis/): A first look at\nFutures and how to use them to write asynchronous Dart code.\n\n* [Futures and Error Handling]\n(https://www.dartlang.org/articles/futures-and-error-handling/): Everything\nyou wanted to know about handling errors and exceptions when working with\nFutures (but were afraid to ask).\n\n* [The Event Loop and Dart](https://www.dartlang.org/articles/event-loop/):\nLearn how Dart handles the event queue and microtask queue, so you can write\nbetter asynchronous code with fewer surprises.\n\n* [Asynchronous Unit Testing with Dart]\n(https://www.dartlang.org/articles/dart-unit-tests/#asynchronous-tests): How\nto test asynchronous code.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"StreamTransformer","id":"StreamTransformer","comment":"\nThe target of a [Stream.transform] call.\n\nThe [Stream.transform] call will pass itself to this object and then return\nthe resulting stream.\n\nIt is good practice to write transformers that can be used multiple times.\n","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"method","name":"bind","id":"bind1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"}]},"kind":"param","name":"stream","id":"stream"}],"line":"1176"},{"returnType":{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"},{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"constructor","name":"","id":"1()","comment":"\nCreates a [StreamTransformer].\n\nThe returned instance takes responsibility of implementing ([bind]).\nWhen the user invokes `bind` it returns a new \"bound\" stream. Only when\nthe user starts listening to the bound stream, the `listen` method\ninvokes the given closure [transformer].\n\nThe [transformer] closure receives the stream, that was bound, as argument\nand returns a [StreamSubscription]. In almost all cases the closure\nlistens itself to the stream that is given as argument.\n\nThe result of invoking the [transformer] closure is a [StreamSubscription].\nThe bound stream-transformer (created by the `bind` method above) then sets\nthe handlers it received as part of the `listen` call.\n\nConceptually this can be summarized as follows:\n\n1. `var transformer = new StreamTransformer(transformerClosure);`\n  creates a `StreamTransformer` that supports the `bind` method.\n2. `var boundStream = stream.transform(transformer);` binds the `stream`\n  and returns a bound stream that has a pointer to `stream`.\n3. `boundStream.listen(f1, onError: f2, onDone: f3, cancelOnError: b)`\n  starts the listening and transformation. This is accomplished\n  in 2 steps: first the `boundStream` invokes the `transformerClosure` with\n  the `stream` it captured: `transformerClosure(stream, b)`.\n  The result `subscription`, a [StreamSubscription], is then\n  updated to receive its handlers: `subscription.onData(f1)`,\n  `subscription.onError(f2)`, `subscription(f3)`. Finally the subscription\n  is returned as result of the `listen` call.\n\nThere are two common ways to create a StreamSubscription:\n\n1. by creating a new class that implements [StreamSubscription].\n   Note that the subscription should run callbacks in the [Zone] the\n   stream was listened to.\n2. by allocating a [StreamController] and to return the result of\n   listening to its stream.\n\nExample use of a duplicating transformer:\n\n    stringStream.transform(new StreamTransformer<String, String>(\n        (Stream<String> input, bool cancelOnError) {\n          StreamController<String> controller;\n          StreamSubscription<String> subscription;\n          controller = new StreamController<String>(\n            onListen: () {\n              subscription = input.listen((data) {\n                  // Duplicate the data.\n                  controller.add(data);\n                  controller.add(data);\n                },\n                onError: controller.addError,\n                onDone: controller.close,\n                cancelOnError: cancelOnError);\n            },\n            onPause: subscription.pause,\n            onResume: subscription.resume,\n            onCancel: subscription.cancel,\n            sync: true);\n          return controller.stream.listen(null);\n        });\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"transformer","id":"transformer","children":[{"returnType":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"}]},"kind":"param","name":"stream","id":"stream","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/async/stream.dart","line":"1156"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"cancelOnError","id":"cancelOnError","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/async/stream.dart","line":"1156"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}],"line":"1156"}],"line":"1155"},{"returnType":{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"},{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"constructor","name":"fromHandlers","id":"fromHandlers3()","comment":"\nCreates a [StreamTransformer] that delegates events to the given functions.\n\nExample use of a duplicating transformer:\n\n    stringStream.transform(new StreamTransformer<String, String>.fromHandlers(\n        handleData: (String value, EventSink<String> sink) {\n          sink.add(value);\n          sink.add(value);  // Duplicate the incoming events.\n        }));\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"handleData","id":"handleData","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"S","refId":"dart.async/StreamTransformer/S"},"kind":"param","name":"data","id":"data","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/async/stream.dart","line":"1171"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"param","name":"sink","id":"sink","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/async/stream.dart","line":"1171"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}],"line":"1171"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"handleError","id":"handleError","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"error","id":"error","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/async/stream.dart","line":"1172"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"param","name":"stackTrace","id":"stackTrace","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/async/stream.dart","line":"1172"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"param","name":"sink","id":"sink","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/async/stream.dart","line":"1172"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}],"line":"1172"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"handleDone","id":"handleDone","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"param","name":"sink","id":"sink","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/async/stream.dart","line":"1173"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}],"line":"1173"}],"line":"1170"},{"kind":"typeparam","name":"S","id":"S"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/async/stream.dart","line":"1090"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"EventSink","id":"EventSink","comment":"\nAn interface that abstracts creation or handling of [Stream] events.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"Create a data event ","children":[{"ref":{"name":"T","refId":"dart.async/EventSink/T"},"kind":"param","name":"event","id":"event"}],"line":"995"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addError","id":"addError2()","comment":"Create an async error. ","children":[{"kind":"param","name":"errorEvent","id":"errorEvent"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace"}],"line":"997"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","comment":"Request a stream to close. ","line":"999"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/async/stream.dart","line":"993"}],"uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/async/async.dart","line":"32"}],"kind":"library","name":"package:utf/utf.dart","id":"utf","comment":"\nSupport for encoding and decoding Unicode characters in UTF-8, UTF-16, and\nUTF-32.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_validCodepoint","id":"_validCodepoint1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"codepoint","id":"codepoint"}],"isPrivate":true,"uri":"package:utf/utf32.dart","line":"334"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"hasUtf32leBom","id":"hasUtf32leBom3()","comment":"\nIdentifies whether a List of bytes starts (based on offset) with a\nlittle-endian byte-order marker (BOM).\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf32EncodedBytes","id":"utf32EncodedBytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"}],"uri":"package:utf/utf32.dart","line":"170"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"hasUtf32beBom","id":"hasUtf32beBom3()","comment":"\nIdentifies whether a List of bytes starts (based on offset) with a\nbig-endian byte-order marker (BOM).\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf32EncodedBytes","id":"utf32EncodedBytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"}],"uri":"package:utf/utf32.dart","line":"158"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"hasUtf32Bom","id":"hasUtf32Bom3()","comment":"\nIdentifies whether a List of bytes starts (based on offset) with a\nbyte-order marker (BOM).\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf32EncodedBytes","id":"utf32EncodedBytes","line":"149"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"149"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"149"}],"uri":"package:utf/utf32.dart","line":"148"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"encodeUtf32le","id":"encodeUtf32le2()","comment":"\nProduce a list of UTF-32LE encoded bytes. By default, this method produces\nUTF-32BE bytes with no BOM.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"writeBOM","id":"writeBOM"}],"uri":"package:utf/utf32.dart","line":"124"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"encodeUtf32be","id":"encodeUtf32be2()","comment":"\nProduce a list of UTF-32BE encoded bytes. By default, this method produces\nUTF-32BE bytes with no BOM.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"writeBOM","id":"writeBOM"}],"uri":"package:utf/utf32.dart","line":"100"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"encodeUtf32","id":"encodeUtf321()","comment":"\nProduce a list of UTF-32 encoded bytes. This method prefixes the resulting\nbytes with a big-endian byte-order-marker.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"uri":"package:utf/utf32.dart","line":"93"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decodeUtf32le","id":"decodeUtf32le5()","comment":"\nProduce a String from a sequence of UTF-32LE encoded bytes. The parameters\nallow an offset into a list of bytes (as int), limiting the length of the\nvalues be decoded and the ability of override the default Unicode\nreplacement character. Set the replacementCharacter to null to throw an\nArgumentError rather than replace the bad value.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes","line":"84"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"84"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"84"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"stripBom","id":"stripBom","line":"84"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"85"}],"uri":"package:utf/utf32.dart","line":"83"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decodeUtf32be","id":"decodeUtf32be5()","comment":"\nProduce a String from a sequence of UTF-32BE encoded bytes. The parameters\nallow an offset into a list of bytes (as int), limiting the length of the\nvalues be decoded and the ability of override the default Unicode\nreplacement character. Set the replacementCharacter to null to throw an\nArgumentError rather than replace the bad value.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes","line":"71"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"71"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"71"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"stripBom","id":"stripBom","line":"71"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"72"}],"uri":"package:utf/utf32.dart","line":"70"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decodeUtf32","id":"decodeUtf324()","comment":"\nProduce a String from a sequence of UTF-32 encoded bytes. The parameters\nallow an offset into a list of bytes (as int), limiting the length of the\nvalues be decoded and the ability of override the default Unicode\nreplacement character. Set the replacementCharacter to null to throw an\nArgumentError rather than replace the bad value.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"59"}],"uri":"package:utf/utf32.dart","line":"58"},{"returnType":{"name":"IterableUtf32Decoder","refId":"utf/IterableUtf32Decoder"},"kind":"method","name":"decodeUtf32leAsIterable","id":"decodeUtf32leAsIterable5()","comment":"\nDecodes the UTF-32LE bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. This method strips a leading BOM by default,\nbut can be overridden by setting the optional parameter [stripBom] to false.\nSet the replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"44"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"44"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"stripBom","id":"stripBom","line":"44"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"45"}],"uri":"package:utf/utf32.dart","line":"43"},{"returnType":{"name":"IterableUtf32Decoder","refId":"utf/IterableUtf32Decoder"},"kind":"method","name":"decodeUtf32beAsIterable","id":"decodeUtf32beAsIterable5()","comment":"\nDecodes the UTF-32BE bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. This method strips a leading BOM by default,\nbut can be overridden by setting the optional parameter [stripBom] to false.\nSet the replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"29"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"29"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"stripBom","id":"stripBom","line":"29"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"30"}],"uri":"package:utf/utf32.dart","line":"28"},{"returnType":{"name":"IterableUtf32Decoder","refId":"utf/IterableUtf32Decoder"},"kind":"method","name":"decodeUtf32AsIterable","id":"decodeUtf32AsIterable4()","comment":"\nDecodes the UTF-32 bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. Determines the byte order from the BOM,\nor uses big-endian as a default. This method always strips a leading BOM.\nSet the replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"16"}],"uri":"package:utf/utf32.dart","line":"14"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"_stringToUtf16CodeUnits","id":"_stringToUtf16CodeUnits1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"isPrivate":true,"uri":"package:utf/utf16.dart","line":"180"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"hasUtf16leBom","id":"hasUtf16leBom3()","comment":"\nIdentifies whether a List of bytes starts (based on offset) with a\nlittle-endian byte-order marker (BOM).\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf16EncodedBytes","id":"utf16EncodedBytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"}],"uri":"package:utf/utf16.dart","line":"173"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"hasUtf16beBom","id":"hasUtf16beBom3()","comment":"\nIdentifies whether a List of bytes starts (based on offset) with a\nbig-endian byte-order marker (BOM).\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf16EncodedBytes","id":"utf16EncodedBytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"}],"uri":"package:utf/utf16.dart","line":"162"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"hasUtf16Bom","id":"hasUtf16Bom3()","comment":"\nIdentifies whether a List of bytes starts (based on offset) with a\nbyte-order marker (BOM).\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf32EncodedBytes","id":"utf32EncodedBytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"}],"uri":"package:utf/utf16.dart","line":"153"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"encodeUtf16le","id":"encodeUtf16le2()","comment":"\nProduce a list of UTF-16LE encoded bytes. By default, this method produces\nUTF-16LE bytes with no BOM.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"writeBOM","id":"writeBOM"}],"uri":"package:utf/utf16.dart","line":"133"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"encodeUtf16be","id":"encodeUtf16be2()","comment":"\nProduce a list of UTF-16BE encoded bytes. By default, this method produces\nUTF-16BE bytes with no BOM.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"writeBOM","id":"writeBOM"}],"uri":"package:utf/utf16.dart","line":"113"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"encodeUtf16","id":"encodeUtf161()","comment":"\nProduce a list of UTF-16 encoded bytes. This method prefixes the resulting\nbytes with a big-endian byte-order-marker.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"uri":"package:utf/utf16.dart","line":"106"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decodeUtf16le","id":"decodeUtf16le5()","comment":"\nProduce a String from a sequence of UTF-16LE encoded bytes. This method\nstrips a leading BOM by default, but can be overridden by setting the\noptional parameter [stripBom] to false. Set the [replacementCodepoint] to\nnull to throw an ArgumentError rather than replace the bad value.\nThe default value for the [replacementCodepoint] is U+FFFD.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"stripBom","id":"stripBom","line":"94"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"95"}],"uri":"package:utf/utf16.dart","line":"93"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decodeUtf16be","id":"decodeUtf16be5()","comment":"\nProduce a String from a sequence of UTF-16BE encoded bytes. This method\nstrips a leading BOM by default, but can be overridden by setting the\noptional parameter [stripBom] to false. Set the [replacementCodepoint] to\nnull to throw an ArgumentError rather than replace the bad value.\nThe default value for the [replacementCodepoint] is U+FFFD.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"stripBom","id":"stripBom","line":"78"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"79"}],"uri":"package:utf/utf16.dart","line":"77"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decodeUtf16","id":"decodeUtf164()","comment":"\nProduce a String from a sequence of UTF-16 encoded bytes. This method always\nstrips a leading BOM. Set the [replacementCodepoint] to null to throw  an\nArgumentError rather than replace the bad value. The default\nvalue for the [replacementCodepoint] is U+FFFD.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"62"}],"uri":"package:utf/utf16.dart","line":"61"},{"returnType":{"name":"IterableUtf16Decoder","refId":"utf/IterableUtf16Decoder"},"kind":"method","name":"decodeUtf16leAsIterable","id":"decodeUtf16leAsIterable5()","comment":"\nDecodes the UTF-16LE bytes as an iterable. Thus, the consumer can only\nconvert as much of the input as needed. This method strips a leading BOM by\ndefault, but can be overridden by setting the optional parameter [stripBom]\nto false. Set the [replacementCodepoint] to null to throw an\nArgumentError rather than replace the bad value. The default\nvalue for the [replacementCodepoint] is U+FFFD.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"48"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"stripBom","id":"stripBom","line":"48"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"48"}],"uri":"package:utf/utf16.dart","line":"47"},{"returnType":{"name":"IterableUtf16Decoder","refId":"utf/IterableUtf16Decoder"},"kind":"method","name":"decodeUtf16beAsIterable","id":"decodeUtf16beAsIterable5()","comment":"\nDecodes the UTF-16BE bytes as an iterable. Thus, the consumer can only\nconvert as much of the input as needed. This method strips a leading BOM by\ndefault, but can be overridden by setting the optional parameter [stripBom]\nto false. Set the [replacementCodepoint] to null to throw an\nArgumentError rather than replace the bad value. The default\nvalue for the [replacementCodepoint] is U+FFFD.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"32"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"stripBom","id":"stripBom","line":"32"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"32"}],"uri":"package:utf/utf16.dart","line":"31"},{"returnType":{"name":"IterableUtf16Decoder","refId":"utf/IterableUtf16Decoder"},"kind":"method","name":"decodeUtf16AsIterable","id":"decodeUtf16AsIterable4()","comment":"\nDecodes the UTF-16 bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. Determines the byte order from the BOM,\nor uses big-endian as a default. This method always strips a leading BOM.\nSet the [replacementCodepoint] to null to throw an ArgumentError\nrather than replace the bad value. The default value for\n[replacementCodepoint] is U+FFFD.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"16"}],"uri":"package:utf/utf16.dart","line":"15"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"utf8ToCodepoints","id":"utf8ToCodepoints4()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf8EncodedBytes","id":"utf8EncodedBytes","line":"121"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"121"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"121"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"122"}],"uri":"package:utf/utf8.dart","line":"120"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"codepointsToUtf8","id":"codepointsToUtf83()","comment":"\nEncode code points as UTF-8 code units.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"codepoints","id":"codepoints","line":"71"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"71"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"71"}],"uri":"package:utf/utf8.dart","line":"70"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_addToEncoding","id":"_addToEncoding4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"buffer","id":"buffer"}],"isPrivate":true,"uri":"package:utf/utf8.dart","line":"57"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"encodeUtf8","id":"encodeUtf81()","comment":"\nProduce a sequence of UTF-8 encoded bytes from the provided string.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"uri":"package:utf/utf8.dart","line":"54"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decodeUtf8","id":"decodeUtf84()","comment":"\nProduce a String from a List of UTF-8 encoded bytes. The parameters\ncan set an offset into a list of bytes (as int), limit the length of the\nvalues to be decoded, and override the default Unicode replacement character.\nSet the replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"45"}],"uri":"package:utf/utf8.dart","line":"44"},{"returnType":{"name":"IterableUtf8Decoder","refId":"utf/IterableUtf8Decoder"},"kind":"method","name":"decodeUtf8AsIterable","id":"decodeUtf8AsIterable4()","comment":"\nDecodes the UTF-8 bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. Set the replacementCharacter to null to\nthrow an ArgumentError rather than replace the bad value.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"32"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"33"}],"uri":"package:utf/utf8.dart","line":"31"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"_utf16CodeUnitsToCodepoints","id":"_utf16CodeUnitsToCodepoints4()","comment":"\nDecodes the utf16 codeunits to codepoints.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf16CodeUnits","id":"utf16CodeUnits","line":"107"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"107"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"107"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"108"}],"isPrivate":true,"line":"106"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"_codepointsToUtf16CodeUnits","id":"_codepointsToUtf16CodeUnits4()","comment":"\nEncode code points as UTF16 code units.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"codepoints","id":"codepoints","line":"62"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"63"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"64"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"65"}],"isPrivate":true,"line":"61"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"codepointsToString","id":"codepointsToString1()","comment":"\nGenerate a string from the provided Unicode codepoints.\n\n*Deprecated* Use [String.fromCharCodes] instead.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"codepoints","id":"codepoints"}],"line":"34"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"stringToCodepoints","id":"stringToCodepoints1()","comment":"\nProvide a list of Unicode codepoints for a given string.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_SUBSEQUENT_BYTE_BASE","id":"_UTF8_SUBSEQUENT_BYTE_BASE","isPrivate":true,"uri":"package:utf/utf8.dart","line":"24"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_FIRST_BYTE_BOUND_EXCL","id":"_UTF8_FIRST_BYTE_BOUND_EXCL","isPrivate":true,"uri":"package:utf/utf8.dart","line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_FIRST_BYTE_OF_FOUR_MASK","id":"_UTF8_FIRST_BYTE_OF_FOUR_MASK","isPrivate":true,"uri":"package:utf/utf8.dart","line":"21"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_FIRST_BYTE_OF_THREE_MASK","id":"_UTF8_FIRST_BYTE_OF_THREE_MASK","isPrivate":true,"uri":"package:utf/utf8.dart","line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_FIRST_BYTE_OF_TWO_MASK","id":"_UTF8_FIRST_BYTE_OF_TWO_MASK","isPrivate":true,"uri":"package:utf/utf8.dart","line":"19"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_FIRST_BYTE_OF_SIX_BASE","id":"_UTF8_FIRST_BYTE_OF_SIX_BASE","isPrivate":true,"uri":"package:utf/utf8.dart","line":"17"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_FIRST_BYTE_OF_FIVE_BASE","id":"_UTF8_FIRST_BYTE_OF_FIVE_BASE","isPrivate":true,"uri":"package:utf/utf8.dart","line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_FIRST_BYTE_OF_FOUR_BASE","id":"_UTF8_FIRST_BYTE_OF_FOUR_BASE","isPrivate":true,"uri":"package:utf/utf8.dart","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_FIRST_BYTE_OF_THREE_BASE","id":"_UTF8_FIRST_BYTE_OF_THREE_BASE","isPrivate":true,"uri":"package:utf/utf8.dart","line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_FIRST_BYTE_OF_TWO_BASE","id":"_UTF8_FIRST_BYTE_OF_TWO_BASE","isPrivate":true,"uri":"package:utf/utf8.dart","line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_LO_SIX_BIT_MASK","id":"_UTF8_LO_SIX_BIT_MASK","isPrivate":true,"uri":"package:utf/utf8.dart","line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_THREE_BYTE_MAX","id":"_UTF8_THREE_BYTE_MAX","isPrivate":true,"uri":"package:utf/utf8.dart"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_TWO_BYTE_MAX","id":"_UTF8_TWO_BYTE_MAX","isPrivate":true,"uri":"package:utf/utf8.dart","line":"8"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_UTF8_ONE_BYTE_MAX","id":"_UTF8_ONE_BYTE_MAX","isPrivate":true,"uri":"package:utf/utf8.dart","line":"7"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_UTF16_LO_MASK","id":"UNICODE_UTF16_LO_MASK","line":"56"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_UTF16_HI_MASK","id":"UNICODE_UTF16_HI_MASK","line":"55"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_UTF16_SURROGATE_UNIT_1_BASE","id":"UNICODE_UTF16_SURROGATE_UNIT_1_BASE","line":"54"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_UTF16_SURROGATE_UNIT_0_BASE","id":"UNICODE_UTF16_SURROGATE_UNIT_0_BASE","line":"53"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_UTF16_OFFSET","id":"UNICODE_UTF16_OFFSET","line":"52"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_UTF16_RESERVED_HI","id":"UNICODE_UTF16_RESERVED_HI","line":"51"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_UTF16_RESERVED_LO","id":"UNICODE_UTF16_RESERVED_LO","line":"50"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_PLANE_ONE_MAX","id":"UNICODE_PLANE_ONE_MAX","line":"49"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_VALID_RANGE_MAX","id":"UNICODE_VALID_RANGE_MAX","line":"48"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_BYTE_ONE_MASK","id":"UNICODE_BYTE_ONE_MASK","line":"47"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_BYTE_ZERO_MASK","id":"UNICODE_BYTE_ZERO_MASK","line":"46"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_UTF_BOM_HI","id":"UNICODE_UTF_BOM_HI","line":"44"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_UTF_BOM_LO","id":"UNICODE_UTF_BOM_LO","line":"43"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_BOM","id":"UNICODE_BOM","line":"42"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","id":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","comment":"\nInvalid codepoints or encodings may be substituted with the value U+fffd.\n","line":"41"},{"superclass":{"name":"Utf32BytesDecoder","refId":"utf/Utf32BytesDecoder"},"kind":"class","name":"Utf32leBytesDecoder","id":"Utf32leBytesDecoder","comment":"\nConvert UTF-32BE encoded bytes to codepoints by grouping 4 bytes\nto produce the unicode codepoint.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"decode","id":"decode0()","line":"321"},{"kind":"constructor","name":"","id":"5()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf32EncodedBytes","id":"utf32EncodedBytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"311"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"stripBom","id":"stripBom","line":"311"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"312"}],"line":"310"}],"uri":"package:utf/utf32.dart","line":"309"},{"superclass":{"name":"Utf32BytesDecoder","refId":"utf/Utf32BytesDecoder"},"kind":"class","name":"Utf32beBytesDecoder","id":"Utf32beBytesDecoder","comment":"\nConvert UTF-32BE encoded bytes to codepoints by grouping 4 bytes\nto produce the unicode codepoint.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"decode","id":"decode0()","line":"292"},{"kind":"constructor","name":"","id":"5()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf32EncodedBytes","id":"utf32EncodedBytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"282"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"stripBom","id":"stripBom","line":"282"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"283"}],"line":"281"}],"uri":"package:utf/utf32.dart","line":"280"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"_ListRangeIterator","refId":"utf/_ListRangeIterator"}],"kind":"class","name":"Utf32BytesDecoder","id":"Utf32BytesDecoder","comment":"\nAbstrace parent class converts encoded bytes to codepoints.\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"decodeRest","id":"decodeRest0()","line":"224"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"235"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"backup","id":"backup1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"kind":"param","name":"by","id":"by"}],"line":"263"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"kind":"param","name":"count","id":"count"}],"line":"269"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"decode","id":"decode0()","line":"273"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"current","id":"current","line":"233"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"position","id":"position","line":"261"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"remaining","id":"remaining","line":"267"},{"ref":{"name":"_ListRangeIterator","refId":"utf/_ListRangeIterator"},"isFinal":true,"kind":"variable","name":"utf32EncodedBytesIterator","id":"utf32EncodedBytesIterator","line":"199"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"replacementCodepoint","id":"replacementCodepoint","line":"200"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_current","id":"_current","isPrivate":true,"line":"201"},{"kind":"constructor","name":"_fromListRangeIterator","id":"_fromListRangeIterator2()","children":[{"ref":{"name":"_ListRangeIterator","refId":"utf/_ListRangeIterator"},"initializedField":{"name":"utf32EncodedBytesIterator","refId":"utf/Utf32BytesDecoder/utf32EncodedBytesIterator"},"kind":"param","name":"utf32EncodedBytesIterator","id":"utf32EncodedBytesIterator","line":"204"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"replacementCodepoint","refId":"utf/Utf32BytesDecoder/replacementCodepoint"},"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"204"}],"isPrivate":true,"line":"203"},{"returnType":{"name":"Utf32BytesDecoder","refId":"utf/Utf32BytesDecoder"},"kind":"constructor","name":"","id":"4()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf32EncodedBytes","id":"utf32EncodedBytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"207"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"207"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"208"}],"line":"206"}],"uri":"package:utf/utf32.dart","line":"198"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"class","name":"IterableUtf32Decoder","id":"IterableUtf32Decoder","comment":"\nReturn type of [decodeUtf32AsIterable] and variants. The Iterable type\nprovides an iterator on demand and the iterator will only translate bytes\nas requested by the user of the iterator. (Note: results are not cached.)\n","children":[{"ref":{"name":"Utf32BytesDecoder","refId":"utf/Utf32BytesDecoder"},"kind":"property","name":"iterator","id":"iterator","line":"192"},{"ref":{"name":"Utf32BytesDecoderProvider","refId":"utf/Utf32BytesDecoderProvider"},"isFinal":true,"kind":"variable","name":"codeunitsProvider","id":"codeunitsProvider","line":"188"},{"kind":"constructor","name":"_","id":"_1()","children":[{"ref":{"name":"Utf32BytesDecoderProvider","refId":"utf/Utf32BytesDecoderProvider"},"initializedField":{"name":"codeunitsProvider","refId":"utf/IterableUtf32Decoder/codeunitsProvider"},"kind":"param","name":"codeunitsProvider","id":"codeunitsProvider"}],"isPrivate":true,"line":"190"}],"uri":"package:utf/utf32.dart","line":"187"},{"returnType":{"name":"Utf32BytesDecoder","refId":"utf/Utf32BytesDecoder"},"kind":"typedef","name":"Utf32BytesDecoderProvider","id":"Utf32BytesDecoderProvider","uri":"package:utf/utf32.dart","line":"178"},{"superclass":{"name":"Utf16BytesToCodeUnitsDecoder","refId":"utf/Utf16BytesToCodeUnitsDecoder"},"kind":"class","name":"Utf16leBytesToCodeUnitsDecoder","id":"Utf16leBytesToCodeUnitsDecoder","comment":"\nConvert UTF-16LE encoded bytes to utf16 code units by grouping 1-2 bytes\nto produce the code unit (0-(2^16)-1).\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"decode","id":"decode0()","line":"330"},{"kind":"constructor","name":"","id":"5()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf16EncodedBytes","id":"utf16EncodedBytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"320"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"320"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"stripBom","id":"stripBom","line":"320"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"321"}],"line":"319"}],"uri":"package:utf/utf16.dart","line":"318"},{"superclass":{"name":"Utf16BytesToCodeUnitsDecoder","refId":"utf/Utf16BytesToCodeUnitsDecoder"},"kind":"class","name":"Utf16beBytesToCodeUnitsDecoder","id":"Utf16beBytesToCodeUnitsDecoder","comment":"\nConvert UTF-16BE encoded bytes to utf16 code units by grouping 1-2 bytes\nto produce the code unit (0-(2^16)-1).\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"decode","id":"decode0()","line":"305"},{"kind":"constructor","name":"","id":"5()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf16EncodedBytes","id":"utf16EncodedBytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"295"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"295"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"kind":"param","name":"stripBom","id":"stripBom","line":"295"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"296"}],"line":"294"}],"uri":"package:utf/utf16.dart","line":"293"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"_ListRangeIterator","refId":"utf/_ListRangeIterator"}],"kind":"class","name":"Utf16BytesToCodeUnitsDecoder","id":"Utf16BytesToCodeUnitsDecoder","comment":"\nConvert UTF-16 encoded bytes to UTF-16 code units by grouping 1-2 bytes\nto produce the code unit (0-(2^16)-1). Relies on BOM to determine\nendian-ness, and defaults to BE.\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"decodeRest","id":"decodeRest0()","comment":"\nProvides a fast way to decode the rest of the source bytes in a single\ncall. This method trades memory for improved speed in that it potentially\nover-allocates the List containing results.\n","line":"240"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"257"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"backup","id":"backup1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"kind":"param","name":"by","id":"by"}],"line":"276"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"kind":"param","name":"count","id":"count"}],"line":"282"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"decode","id":"decode0()","line":"286"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"current","id":"current","line":"255"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"position","id":"position","line":"274"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"remaining","id":"remaining","line":"280"},{"ref":{"name":"_ListRangeIterator","refId":"utf/_ListRangeIterator"},"isFinal":true,"kind":"variable","name":"utf16EncodedBytesIterator","id":"utf16EncodedBytesIterator","line":"210"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"replacementCodepoint","id":"replacementCodepoint","line":"211"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_current","id":"_current","isPrivate":true,"line":"212"},{"kind":"constructor","name":"_fromListRangeIterator","id":"_fromListRangeIterator2()","children":[{"ref":{"name":"_ListRangeIterator","refId":"utf/_ListRangeIterator"},"initializedField":{"name":"utf16EncodedBytesIterator","refId":"utf/Utf16BytesToCodeUnitsDecoder/utf16EncodedBytesIterator"},"kind":"param","name":"utf16EncodedBytesIterator","id":"utf16EncodedBytesIterator","line":"215"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"replacementCodepoint","refId":"utf/Utf16BytesToCodeUnitsDecoder/replacementCodepoint"},"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"215"}],"isPrivate":true,"line":"214"},{"returnType":{"name":"Utf16BytesToCodeUnitsDecoder","refId":"utf/Utf16BytesToCodeUnitsDecoder"},"kind":"constructor","name":"","id":"4()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf16EncodedBytes","id":"utf16EncodedBytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset","line":"218"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length","line":"218"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"219"}],"line":"217"}],"uri":"package:utf/utf16.dart","line":"209"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"class","name":"IterableUtf16Decoder","id":"IterableUtf16Decoder","comment":"\nReturn type of [decodeUtf16AsIterable] and variants. The Iterable type\nprovides an iterator on demand and the iterator will only translate bytes\nas requested by the user of the iterator. (Note: results are not cached.)\n","children":[{"ref":{"name":"Utf16CodeUnitDecoder","refId":"utf/Utf16CodeUnitDecoder"},"kind":"property","name":"iterator","id":"iterator","line":"199"},{"ref":{"name":"_CodeUnitsProvider","refId":"utf/_CodeUnitsProvider"},"isFinal":true,"kind":"variable","name":"codeunitsProvider","id":"codeunitsProvider","line":"194"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"replacementCodepoint","id":"replacementCodepoint","line":"195"},{"kind":"constructor","name":"_","id":"_2()","children":[{"ref":{"name":"_CodeUnitsProvider","refId":"utf/_CodeUnitsProvider"},"initializedField":{"name":"codeunitsProvider","refId":"utf/IterableUtf16Decoder/codeunitsProvider"},"kind":"param","name":"codeunitsProvider","id":"codeunitsProvider"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"replacementCodepoint","refId":"utf/IterableUtf16Decoder/replacementCodepoint"},"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint"}],"isPrivate":true,"line":"197"}],"uri":"package:utf/utf16.dart","line":"193"},{"returnType":{"name":"_ListRangeIterator","refId":"utf/_ListRangeIterator"},"kind":"typedef","name":"_CodeUnitsProvider","id":"_CodeUnitsProvider","isPrivate":true,"uri":"package:utf/utf16.dart","line":"184"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"int","refId":"dart.core/int"}]}],"kind":"class","name":"Utf8Decoder","id":"Utf8Decoder","comment":"\nProvides an iterator of Unicode codepoints from UTF-8 encoded bytes. The\nparameters can set an offset into a list of bytes (as int), limit the length\nof the values to be decoded, and override the default Unicode replacement\ncharacter. Set the replacementCharacter to null to throw an\nArgumentError rather than replace the bad value. The return value\nfrom this method can be used as an Iterable (e.g. in a for-loop).\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"decodeRest","id":"decodeRest0()","comment":"Decode the remaininder of the characters in this decoder\ninto a [List<int>].\n","line":"175"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"192"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"current","id":"current","line":"190"},{"ref":{"name":"_ListRangeIterator","refId":"utf/_ListRangeIterator"},"isFinal":true,"kind":"variable","name":"utf8EncodedBytesIterator","id":"utf8EncodedBytesIterator","line":"156"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"replacementCodepoint","id":"replacementCodepoint","line":"157"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_current","id":"_current","isPrivate":true,"line":"158"},{"kind":"constructor","name":"","id":"4()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf8EncodedBytes","id":"utf8EncodedBytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"initializedField":{"name":"replacementCodepoint","refId":"utf/Utf8Decoder/replacementCodepoint"},"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"161"}],"line":"160"},{"kind":"constructor","name":"_fromListRangeIterator","id":"_fromListRangeIterator2()","children":[{"ref":{"name":"_ListRange","refId":"utf/_ListRange"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"initializedField":{"name":"replacementCodepoint","refId":"utf/Utf8Decoder/replacementCodepoint"},"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"168"}],"isPrivate":true,"line":"167"}],"uri":"package:utf/utf8.dart","line":"155"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"class","name":"IterableUtf8Decoder","id":"IterableUtf8Decoder","comment":"\nReturn type of [decodeUtf8AsIterable] and variants. The Iterable type\nprovides an iterator on demand and the iterator will only translate bytes\nas requested by the user of the iterator. (Note: results are not cached.)\n","children":[{"ref":{"name":"Utf8Decoder","refId":"utf/Utf8Decoder"},"kind":"property","name":"iterator","id":"iterator","line":"143"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"isFinal":true,"kind":"variable","name":"bytes","id":"bytes","line":"135"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"offset","id":"offset","line":"136"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"length","id":"length","line":"137"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"replacementCodepoint","id":"replacementCodepoint","line":"138"},{"kind":"constructor","name":"","id":"4()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"initializedField":{"name":"bytes","refId":"utf/IterableUtf8Decoder/bytes"},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"initializedField":{"name":"offset","refId":"utf/IterableUtf8Decoder/offset"},"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"null","isOptional":true,"initializedField":{"name":"length","refId":"utf/IterableUtf8Decoder/length"},"kind":"param","name":"length","id":"length"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"initializedField":{"name":"replacementCodepoint","refId":"utf/IterableUtf8Decoder/replacementCodepoint"},"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"141"}],"line":"140"}],"uri":"package:utf/utf8.dart","line":"134"},{"superclass":{"name":"_StringEncoder","refId":"utf/_StringEncoder"},"kind":"class","name":"Utf8EncoderTransformer","id":"Utf8EncoderTransformer","comment":"\nStringTransformer that UTF-8 encodes a stream of strings.\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"_processString","id":"_processString1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"string","id":"string"}],"isPrivate":true,"line":"205"}],"uri":"package:utf/utf_stream.dart","line":"204"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"String","refId":"dart.core/String"}]},{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]}],"kind":"class","name":"_StringEncoder","id":"_StringEncoder","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"method","name":"bind","id":"bind1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"stream","id":"stream"}],"line":"176"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"data","id":"data"}],"line":"188"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addError","id":"addError2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"error","id":"error"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace"}],"line":"192"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"196"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"_processString","id":"_processString1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"string","id":"string"}],"isPrivate":true,"line":"198"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"variable","name":"_outSink","id":"_outSink","isPrivate":true,"line":"174"}],"isPrivate":true,"uri":"package:utf/utf_stream.dart","line":"171"},{"superclass":{"name":"_StringDecoder","refId":"utf/_StringDecoder"},"kind":"class","name":"Utf8DecoderTransformer","id":"Utf8DecoderTransformer","comment":"\nStringTransformer that decodes a stream of UTF-8 encoded bytes.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_processBytes","id":"_processBytes1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"getNext","id":"getNext","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"isPrivate":true,"line":"122"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"kind":"param","name":"replacementChar","id":"replacementChar","line":"119"}],"line":"118"}],"uri":"package:utf/utf_stream.dart","line":"117"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},{"name":"String","refId":"dart.core/String"}]}],"kind":"class","name":"_StringDecoder","id":"_StringDecoder","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"bind","id":"bind1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"param","name":"stream","id":"stream"}],"line":"18"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"}],"line":"30"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addError","id":"addError2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"error","id":"error"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace"}],"line":"81"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"85"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_processBytes","id":"_processBytes1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"getNext","id":"getNext","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","uri":"file:///usr/local/Cellar/dart-editor/30107/dart-sdk/lib/core/function.dart","line":"13"}]}],"isPrivate":true,"line":"97"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addChar","id":"_addChar1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"char","id":"char"}],"isPrivate":true,"line":"99"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"variable","name":"_carry","id":"_carry","isPrivate":true,"line":"10"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"variable","name":"_buffer","id":"_buffer","isPrivate":true,"line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_replacementChar","id":"_replacementChar","isPrivate":true,"line":"12"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"variable","name":"_outSink","id":"_outSink","isPrivate":true,"line":"14"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"_replacementChar","refId":"utf/_StringDecoder/_replacementChar"},"kind":"param","name":"_replacementChar","id":"_replacementChar","isPrivate":true}],"line":"16"}],"isPrivate":true,"uri":"package:utf/utf_stream.dart","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"_ListRangeIterator","refId":"utf/_ListRangeIterator"}],"kind":"class","name":"_ListRangeIteratorImpl","id":"_ListRangeIteratorImpl","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"257"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"backup","id":"backup1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"kind":"param","name":"by","id":"by"}],"line":"261"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"kind":"param","name":"count","id":"count"}],"line":"267"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"current","id":"current","line":"255"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"position","id":"position","line":"259"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"remaining","id":"remaining","line":"265"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"isFinal":true,"kind":"variable","name":"_source","id":"_source","isPrivate":true,"line":"248"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_offset","id":"_offset","isPrivate":true,"line":"249"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_end","id":"_end","isPrivate":true,"line":"250"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"initializedField":{"name":"_source","refId":"utf/_ListRangeIteratorImpl/_source"},"kind":"param","name":"_source","id":"_source","isPrivate":true},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"_end","refId":"utf/_ListRangeIteratorImpl/_end"},"kind":"param","name":"_end","id":"_end","isPrivate":true}],"line":"252"}],"isPrivate":true,"line":"247"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"int","refId":"dart.core/int"}]}],"kind":"class","name":"_ListRangeIterator","id":"_ListRangeIterator","comment":"\nThe _ListRangeIterator provides more capabilities than a standard iterator,\nincluding the ability to get the current position, count remaining items,\nand move forward/backward within the iterator.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"239"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"backup","id":"backup1()","children":[{"isOptional":true,"kind":"param","name":"by","id":"by"}],"line":"242"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"skip","id":"skip1()","children":[{"isOptional":true,"kind":"param","name":"count","id":"count"}],"line":"244"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"current","id":"current","line":"240"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"position","id":"position","line":"241"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"remaining","id":"remaining","line":"243"}],"isPrivate":true,"line":"238"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase"},"kind":"class","name":"_ListRange","id":"_ListRange","comment":"\n_ListRange in an internal type used to create a lightweight Interable on a\nrange within a source list. DO NOT MODIFY the underlying list while\niterating over it. The results of doing so are undefined.\n","children":[{"ref":{"name":"_ListRangeIterator","refId":"utf/_ListRangeIterator"},"kind":"property","name":"iterator","id":"iterator","line":"227"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"230"},{"ref":{"name":"List","refId":"dart.core/List"},"isFinal":true,"kind":"variable","name":"_source","id":"_source","isPrivate":true,"line":"208"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_offset","id":"_offset","isPrivate":true,"line":"209"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_length","id":"_length","isPrivate":true,"line":"210"},{"kind":"constructor","name":"","id":"3()","children":[{"kind":"param","name":"source","id":"source"},{"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"isOptional":true,"kind":"param","name":"length","id":"length"}],"line":"212"}],"isPrivate":true,"line":"207"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"int","refId":"dart.core/int"}]}],"kind":"class","name":"Utf16CodeUnitDecoder","id":"Utf16CodeUnitDecoder","comment":"\nAn Iterator<int> of codepoints built on an Iterator of UTF-16 code units.\nThe parameters can override the default Unicode replacement character. Set\nthe replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"152"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"property","name":"iterator","id":"iterator","line":"148"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"current","id":"current","line":"150"},{"ref":{"name":"_ListRangeIterator","refId":"utf/_ListRangeIterator"},"isFinal":true,"kind":"variable","name":"utf16CodeUnitIterator","id":"utf16CodeUnitIterator","line":"134"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"replacementCodepoint","id":"replacementCodepoint","line":"135"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_current","id":"_current","isPrivate":true,"line":"136"},{"kind":"constructor","name":"","id":"4()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"utf16CodeUnits","id":"utf16CodeUnits"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"initializedField":{"name":"replacementCodepoint","refId":"utf/Utf16CodeUnitDecoder/replacementCodepoint"},"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"139"}],"line":"138"},{"kind":"constructor","name":"fromListRangeIterator","id":"fromListRangeIterator2()","children":[{"ref":{"name":"_ListRangeIterator","refId":"utf/_ListRangeIterator"},"initializedField":{"name":"utf16CodeUnitIterator","refId":"utf/Utf16CodeUnitDecoder/utf16CodeUnitIterator"},"kind":"param","name":"utf16CodeUnitIterator","id":"utf16CodeUnitIterator","line":"145"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"replacementCodepoint","refId":"utf/Utf16CodeUnitDecoder/replacementCodepoint"},"kind":"param","name":"replacementCodepoint","id":"replacementCodepoint","line":"146"}],"line":"144"}],"line":"133"}],"uri":"package:utf/utf.dart","line":"9"}