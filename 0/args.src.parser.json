{"dependencies":[{"id":"dart.core","uri":"file:///usr/local/Cellar/dart-editor/25990/dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"file:///usr/local/Cellar/dart-editor/25990/dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"48","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"65","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"id":"args.src.parser","uri":"package:args/src/parser.dart","name":"package:args/src/parser.dart","children":[{"isFinal":true,"id":"_LONG_OPT","name":"_LONG_OPT","isPrivate":true,"line":"11","kind":"variable"},{"isFinal":true,"id":"_ABBR_OPT","name":"_ABBR_OPT","isPrivate":true,"line":"10","kind":"variable"},{"isFinal":true,"id":"_SOLO_OPT","name":"_SOLO_OPT","isPrivate":true,"line":"9","kind":"variable"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Parser","comment":"\nThe actual parsing class. Unlike [ArgParser] which is really more an \"arg\ngrammar\", this is the class that does the parsing and holds the mutable\nstate required during a parse.\n","name":"Parser","children":[{"returnType":{"refId":"args/ArgResults","name":"ArgResults"},"id":"parse0()","comment":"Parses the arguments. This can only be called once. ","name":"parse","line":"56","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"readNextArgAsValue1()","comment":"\nPulls the value for [option] from the second argument in [args]. Validates\nthat there is a valid value there.\n","name":"readNextArgAsValue","children":[{"ref":{"refId":"options/Option","name":"Option"},"id":"option","name":"option","kind":"param"}],"line":"124","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"parseSoloOption0()","comment":"\nTries to parse the current argument as a \"solo\" option, which is a single\nhyphen followed by a single letter. We treat this differently than\ncollapsed abbreviations (like \"-abc\") to handle the possible value that\nmay follow it.\n","name":"parseSoloOption","line":"143","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"parseAbbreviation1()","comment":"\nTries to parse the current argument as a series of collapsed abbreviations\n(like \"-abc\") or a single abbreviation with the value directly attached\nto it (like \"-mrelease\").\n","name":"parseAbbreviation","children":[{"ref":{"refId":"args.src.parser/Parser","name":"Parser"},"id":"innermostCommand","name":"innermostCommand","kind":"param"}],"line":"171","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"parseShortFlag1()","name":"parseShortFlag","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"c","name":"c","kind":"param"}],"line":"210","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"parseLongOption0()","comment":"\nTries to parse the current argument as a long-form named option, which\nmay include a value like \"--mode=release\" or \"--mode release\".\n","name":"parseLongOption","line":"232","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"validate2()","comment":"\nCalled during parsing to validate the arguments. Throws a\n[FormatException] if [condition] is `false`.\n","name":"validate","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"condition","name":"condition","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"}],"line":"280","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"setOption3()","comment":"Validates and stores [value] as the value for [option]. ","name":"setOption","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"id":"results","name":"results","kind":"param"},{"ref":{"refId":"options/Option","name":"Option"},"id":"option","name":"option","kind":"param"},{"id":"value","name":"value","kind":"param"}],"line":"285","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"current","comment":"The current argument being parsed. ","name":"current","line":"53","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"id":"commandName","comment":"\nIf parser is parsing a command's options, this will be the name of the\ncommand. For top-level results, this returns `null`.\n","name":"commandName","line":"23","kind":"variable"},{"ref":{"refId":"args.src.parser/Parser","name":"Parser"},"isFinal":true,"id":"parent","comment":"\nThe parser for the supercommand of this command parser, or `null` if this\nis the top-level parser.\n","name":"parent","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"id":"allowTrailingOptions","comment":"If `true`, parsing will continue after a non-option argument. ","name":"allowTrailingOptions","line":"32","kind":"variable"},{"ref":{"refId":"args/ArgParser","name":"ArgParser"},"isFinal":true,"id":"grammar","comment":"The grammar being parsed. ","name":"grammar","line":"35","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isFinal":true,"id":"args","comment":"The arguments being parsed. ","name":"args","line":"38","kind":"variable"},{"isFinal":true,"id":"rest","comment":"The remaining non-option, non-command arguments. ","name":"rest","line":"41","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Map"},"isFinal":true,"id":"results","comment":"The accumulated parsed options. ","name":"results","line":"44","kind":"variable"},{"id":"6()","name":"","children":[{"initializedField":{"refId":"args.src.parser/Parser/commandName","name":"commandName"},"ref":{"refId":"dart.core/String","name":"String"},"id":"commandName","name":"commandName","kind":"param"},{"initializedField":{"refId":"args.src.parser/Parser/grammar","name":"grammar"},"ref":{"refId":"args/ArgParser","name":"ArgParser"},"id":"grammar","name":"grammar","kind":"param"},{"initializedField":{"refId":"args.src.parser/Parser/args","name":"args"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"args","name":"args","kind":"param"},{"initializedField":{"refId":"args.src.parser/Parser/parent","name":"parent"},"ref":{"refId":"args.src.parser/Parser","name":"Parser"},"id":"parent","name":"parent","kind":"param"},{"id":"rest","name":"rest","kind":"param"},{"initializedField":{"refId":"args.src.parser/Parser/allowTrailingOptions","name":"allowTrailingOptions"},"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","id":"allowTrailingOptions","name":"allowTrailingOptions","line":"47","kind":"param"}],"line":"46","kind":"constructor"}],"line":"18","kind":"class"}],"line":"5","kind":"library"}