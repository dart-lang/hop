{"dependencies":[{"id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"isAbstract":true,"superclass":{"refId":"dart.collection/IterableBase","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"IterableBase"},"id":"Set","comment":"\nA `Set` is a collection of elements where each element can occur only once.\n\nThat is, for each object of the element type, the object is either considered\nto be in the set, or it is not in the set.\n\nSet implementations may consider some elements indistinguishable. These\nobjects will be treated as being the same for any operation on the set.\n\nThe default `Set` implementation, [HashSet], considers objects\nindistinguishable if they are equal with regard to [Object.operator==].\n\nSets may be either ordered or unordered. [HashSet] is unordered and doesn't\nguarantee anything about the order that elements are accessed in by\niteration. [LinkedHashSet] iterates in the insertion order of its elements.\n","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/set.dart","name":"Set","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"contains1()","comment":"\nReturns true if [value] is in the set.\n","name":"contains","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"value","name":"value","kind":"param"}],"line":"45","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"add1()","comment":"\nAdds [value] into the set.\n\nThe method has no effect if [value] is already in the set.\n","name":"add","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"id":"value","name":"value","kind":"param"}],"line":"52","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"addAll1()","comment":"\nAdds all of [elements] to this Set.\n\nEquivalent to adding each element in [elements] using [add],\nbut some collections may be able to optimize it.\n","name":"addAll","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Iterable"},"id":"elements","name":"elements","kind":"param"}],"line":"60","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"remove1()","comment":"\nRemoves [value] from the set. Returns true if [value] was\nin the set. Returns false otherwise. The method has no effect\nif [value] value was not in the set.\n","name":"remove","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"value","name":"value","kind":"param"}],"line":"67","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"removeAll1()","comment":"\nRemoves each element of [elements] from this set.\n","name":"removeAll","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Object","name":"Object"}],"name":"Iterable"},"id":"elements","name":"elements","kind":"param"}],"line":"72","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"retainAll1()","comment":"\nRemoves all elements of this set that are not elements in [elements].\n","name":"retainAll","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Object","name":"Object"}],"name":"Iterable"},"id":"elements","name":"elements","kind":"param"}],"line":"77","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"removeWhere1()","comment":"\nRemoves all elements of this set that satisfy [test].\n","name":"removeWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/set.dart","name":"element","line":"82","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"82","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"retainWhere1()","comment":"\nRemoves all elements of this set that fail to satisfy [test].\n","name":"retainWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/set.dart","name":"element","line":"87","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"87","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"containsAll1()","comment":"\nReturns whether this Set contains all the elements of [other].\n","name":"containsAll","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Object","name":"Object"}],"name":"Iterable"},"id":"other","name":"other","kind":"param"}],"line":"92","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"id":"intersection1()","comment":"\nReturns a new set which is the intersection between this set and [other].\n\nThat is, the returned set contains all the elements of this `Set` that\nare also elements of [other].\n","name":"intersection","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Object","name":"Object"}],"name":"Set"},"id":"other","name":"other","kind":"param"}],"line":"100","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"id":"union1()","comment":"\nReturns a new set which contains all the elements of this set and [other].\n\nThat is, the returned set contains all the elements of this `Set` and\nall the elements of [other].\n","name":"union","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"id":"other","name":"other","kind":"param"}],"line":"108","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"id":"difference1()","comment":"\nReturns a new set with the the elements of this that are not in [other].\n\nThat is, the returned set contains all the elements of this `Set` that\nare not elements of [other].\n","name":"difference","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"id":"other","name":"other","kind":"param"}],"line":"116","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"clear0()","comment":"\nRemoves all elements in the set.\n","name":"clear","line":"121","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"id":"0()","comment":"\nCreates an empty [Set].\n\nThe created `Set` is a [HashSet]. As such, it considers elements that\nare equal (using `==`) to be undistinguishable, and requires them to\nhave a compatible [Object.hashCode] implementation.\n","name":"","line":"31","kind":"constructor"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"id":"from1()","comment":"\nCreates a [Set] that contains all elements of [other].\n\nThe created `Set` is a [HashSet]. As such, it considers elements that\nare equal (using `==`) to be undistinguishable, and requires them to\nhave a compatible [Object.hashCode] implementation.\n","name":"from","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Iterable"},"id":"other","name":"other","kind":"param"}],"line":"40","kind":"constructor"},{"id":"E","name":"E","kind":"typeparam"}],"line":"23","kind":"class"},{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"67","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"79","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"62","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"84","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Map","comment":"\nAn unordered collection of key-value pairs,\nfrom which you retrieve a value by using its associated key.\n\nEach key must be unique.\nNull values are supported, but null keys are not.\n","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/map.dart","name":"Map","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"containsValue1()","comment":"\nReturns true if this map contains the given value.\n","name":"containsValue","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"value","name":"value","kind":"param"}],"line":"59","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"containsKey1()","comment":"\nReturns true if this map contains the given key.\n","name":"containsKey","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"key","name":"key","kind":"param"}],"line":"64","kind":"method"},{"returnType":{"refId":"dart.core/Map/V","name":"V"},"isOperator":true,"id":"[]1()","comment":"\nReturns the value for the given [key] or null if [key] is not\nin the map. Because null values are supported, one should either\nuse [containsKey] to distinguish between an absent key and a null\nvalue, or use the [putIfAbsent] method.\n","name":"[]","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"key","name":"key","kind":"param"}],"line":"72","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"id":"[]=2()","comment":"\nAssociates the [key] with the given [value].\n","name":"[]=","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"id":"key","name":"key","kind":"param"},{"ref":{"refId":"dart.core/Map/V","name":"V"},"id":"value","name":"value","kind":"param"}],"line":"77","kind":"method"},{"returnType":{"refId":"dart.core/Map/V","name":"V"},"id":"putIfAbsent2()","comment":"\nIf [key] is not associated to a value, calls [ifAbsent] and\nupdates the map by mapping [key] to the value returned by\n[ifAbsent]. Returns the value in the map.\n\nIt is an error to add or remove keys from the map during the call to\n[ifAbsent].\n","name":"putIfAbsent","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"id":"key","name":"key","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"ifAbsent","name":"ifAbsent","children":[{"returnType":{"refId":"dart.core/Map/V","name":"V"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"87","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"addAll1()","comment":"\nAdds all key-value pairs of [other] to this map.\n\nIf a key of [other] is already in this map, its value is overwritten.\n\nThe operation is equivalent to doing `this[key] = value` for each key\nand associated value in other. It iterates over [other], which must\ntherefore not change during the iteration.\n","name":"addAll","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"id":"other","name":"other","kind":"param"}],"line":"98","kind":"method"},{"returnType":{"refId":"dart.core/Map/V","name":"V"},"id":"remove1()","comment":"\nRemoves the association for the given [key]. Returns the value for\n[key] in the map or null if [key] is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.\n","name":"remove","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"key","name":"key","kind":"param"}],"line":"106","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"clear0()","comment":"\nRemoves all pairs from the map.\n","name":"clear","line":"111","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"forEach1()","comment":"\nApplies [f] to each {key, value} pair of the map.\n\nIt is an error to add or remove keys from the map during iteration.\n","name":"forEach","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"id":"key","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/map.dart","name":"key","line":"118","kind":"param"},{"ref":{"refId":"dart.core/Map/V","name":"V"},"id":"value","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/map.dart","name":"value","line":"118","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"118","kind":"method"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/K","name":"K"}],"name":"Iterable"},"id":"keys","comment":"\nThe keys of [this].\n","name":"keys","line":"123","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/V","name":"V"}],"name":"Iterable"},"id":"values","comment":"\nThe values of [this].\n","name":"values","line":"128","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","comment":"\nThe number of {key, value} pairs in the map.\n","name":"length","line":"133","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isEmpty","comment":"\nReturns true if there is no {key, value} pair in the map.\n","name":"isEmpty","line":"138","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isNotEmpty","comment":"\nReturns true if there is at least one {key, value} pair in the map.\n","name":"isNotEmpty","line":"143","kind":"property"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"id":"0()","comment":"\nCreates a Map instance with the default implementation.\n","name":"","line":"18","kind":"constructor"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"id":"from1()","comment":"\nCreates a Map instance that contains all key-value pairs of [other].\n","name":"from","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"id":"other","name":"other","kind":"param"}],"line":"23","kind":"constructor"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"id":"fromIterable3()","comment":"\nCreates a Map instance\nwhere the keys and values are computed from the [iterable].\n\nFor each element of the [iterable] this constructor computes a key-value\npair, by applying [key] and [value] respectively.\n\nThe keys computed by the source [iterable] \ndo not need to be unique. The last\noccurrence of a key will simply overwrite any previous value.\n\nIf no values are specified for [key] and [value] the default is the\nidentity function.\n","name":"fromIterable","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/K","name":"K"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"key","name":"key","children":[{"returnType":{"refId":"dart.core/Map/K","name":"K"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/map.dart","name":"element","line":"40","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"40","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"value","name":"value","children":[{"returnType":{"refId":"dart.core/Map/V","name":"V"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/map.dart","name":"element","line":"40","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"40","kind":"param"}],"line":"39","kind":"constructor"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"id":"fromIterables2()","comment":"\nCreates a Map instance associating the given [keys] to [values].\n\nThis constructor iterates over [keys] and [values] and maps each element of\n[keys] to the corresponding element of [values].\n\nIf [keys] contains the same object multiple times, the last occurrence\noverwrites the previous value.\n\nIt is an error if the two [Iterable]s don't have the same length.\n","name":"fromIterables","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/K","name":"K"}],"name":"Iterable"},"id":"keys","name":"keys","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/V","name":"V"}],"name":"Iterable"},"id":"values","name":"values","kind":"param"}],"line":"53","kind":"constructor"},{"id":"K","name":"K","kind":"typeparam"},{"id":"V","name":"V","kind":"typeparam"}],"line":"14","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"List","comment":"\nAn indexable collection of objects with a length.\n\nSubclasses of this class implement different kinds of lists.\nThe most common kinds of lists are:\n\n* Fixed-length list.\n  An error occurs when attempting to use operations\n  that can change the length of the list.\n\n* Growable list. Full implementation of the API defined in this class.\n\nThe following code illustrates that some List implementations support\nonly a subset of the API.\n\n    var fixedLengthList = new List(5);\n    fixedLengthList.length = 0;  // Error.\n    fixedLengthList.add(499);    // Error.\n    fixedLengthList[0] = 87;\n\n    var growableList = [1, 2];\n    growableList.length = 0;\n    growableList.add(499);\n    growableList[0] = 87;\n\nLists are [Iterable].\nIteration occurs over values in index order.\nChanging the values does not affect iteration,\nbut changing the valid indices&mdash;that is,\nchanging the list's length&mdash;between\niteration steps\ncauses a [ConcurrentModificationError].\nThis means that only growable lists can throw ConcurrentModificationError.\nIf the length changes temporarily\nand is restored before continuing the iteration,\nthe iterator does not detect it.\n","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/list.dart","name":"List","children":[{"returnType":{"refId":"dart.core/List/E","name":"E"},"isOperator":true,"id":"[]1()","comment":"\nReturns the object at the given [index] in the list\nor throws a [RangeError] if [index] is out of bounds.\n","name":"[]","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"111","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"id":"[]=2()","comment":"\nSets the value at the given [index] in the list to [value]\nor throws a [RangeError] if [index] is out of bounds.\n","name":"[]=","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"value","name":"value","kind":"param"}],"line":"117","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isSetter":true,"id":"length=1()","comment":"\nChanges the length of this list.\n\nIf [newLength] is greater than\nthe current [length], entries are initialized to [:null:].\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","name":"length=","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"newLength","name":"newLength","kind":"param"}],"line":"134","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"add1()","comment":"\nAdds [value] to the end of this list,\nextending the length by one.\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","name":"add","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"value","name":"value","kind":"param"}],"line":"142","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"addAll1()","comment":"\nAppends all objects of [iterable] to the end of this list.\n\nExtends the length of the list by the number of objects in [iterable].\nThrows an [UnsupportedError] if this list is fixed-length.\n","name":"addAll","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"150","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"sort1()","comment":"\nSorts this list according to the order specified by the [compare] function.\n\nThe [compare] function must act as a [Comparator].\n\nThe default List implementations use [Comparable.compare] if\n[compare] is omitted.\n","name":"sort","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"compare","name":"compare","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"a","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/list.dart","name":"a","line":"165","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"b","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/list.dart","name":"b","line":"165","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"165","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"id":"indexOf2()","comment":"\nReturns the first index of [element] in this list.\n\nSearches the list from index [start] to the length of the list.\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\nReturns -1 if [element] is not found.\n","name":"indexOf","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"element","name":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"start","name":"start","kind":"param"}],"line":"175","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"id":"lastIndexOf2()","comment":"\nReturns the last index of [element] in this list.\n\nSearches the list backwards from index [start] to 0.\n\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\n\nIf [start] is not provided, it defaults to [:this.length - 1:].\n\nReturns -1 if [element] is not found.\n","name":"lastIndexOf","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"element","name":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"id":"start","name":"start","kind":"param"}],"line":"189","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"clear0()","comment":"\nRemoves all objects from this list;\nthe length of the list becomes zero.\n\nThrows an [UnsupportedError], and retains all objects, if this \nis a fixed-length list.\n","name":"clear","line":"198","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"insert2()","comment":"\nInserts the object at position [index] in this list.\n\nThis increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","name":"insert","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"element","name":"element","kind":"param"}],"line":"209","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"insertAll2()","comment":"\nInserts all objects of [iterable] at position [index] in this list.\n\nThis increases the length of the list by the length of [iterable] and\nshifts all later objects towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","name":"insertAll","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"220","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"setAll2()","comment":"\nOverwrites objects of `this` with the objects of [iterable], starting\nat position [index] in this list.\n\nThis operation does not increase the length of `this`.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn error occurs if the [iterable] is longer than [length] - [index].\n","name":"setAll","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"231","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"remove1()","comment":"\nRemoves [value] from this list.\n\nReturns true if [value] was in the list.\nReturns false otherwise.\nThe method has no effect if [value] was not in the list.\n\nAn [UnsupportedError] occurs if the list is fixed-length.\n","name":"remove","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"value","name":"value","kind":"param"}],"line":"242","kind":"method"},{"returnType":{"refId":"dart.core/List/E","name":"E"},"id":"removeAt1()","comment":"\nRemoves the object at position [index] from this list.\n\nThis method reduces the length of `this` by one and moves all later objects\ndown by one position.\n\nReturns the removed object.\n\n* Throws an [ArgumentError] if [index] is not an [int].\n* Throws a [RangeError] if the [index] is out of range for this list.\n* Throws an [UnsupportedError], and doesn't remove the object,\nif this is a fixed-length list.\n","name":"removeAt","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"257","kind":"method"},{"returnType":{"refId":"dart.core/List/E","name":"E"},"id":"removeLast0()","comment":"\nPops and returns the last object in this list.\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","name":"removeLast","line":"264","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"removeWhere1()","comment":"\nRemoves all objects from this list that satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","name":"removeWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/list.dart","name":"element","line":"273","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"273","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"retainWhere1()","comment":"\nRemoves all objects from this list that fail to satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","name":"retainWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/list.dart","name":"element","line":"282","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"282","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"id":"sublist2()","comment":"\nReturns a new list containing the objects\nfrom [start] inclusive to [end] exclusive.\n\nIf [end] is omitted, the [length] of `this` is used.\n\nAn error occurs if [start] is outside the range `0` .. `length` or if\n[end] is outside the range `start` .. `length`.\n","name":"sublist","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"id":"end","name":"end","kind":"param"}],"line":"293","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"getRange2()","comment":"\nReturns an [Iterable] that iterates over the objects in the range\n[start] inclusive to [end] exclusive.\n\nAn error occurs if [end] is before [start].\n\nAn error occurs if the [start] and [end] are not valid ranges at the time\nof the call to this method. The returned [Iterable] behaves like\n`skip(start).take(end - start)`. That is, it does not throw exceptions\nif `this` changes size.\n\nExample:\n\n    var list = [1, 2, 3, 4, 5];\n    var range = list.getRange(1, 4);\n    print(range.join(', '));  // => 2, 3, 4\n    list.length = 3;\n    print(range.join(', '));  // => 2, 3\n","name":"getRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"}],"line":"314","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"setRange4()","comment":"\nCopies the objects of [iterable], skipping [skipCount] objects first,\ninto the range [start] inclusive to [end] exclusive of `this`.\n\nIf [start] equals [end] and [start]..[end] represents a legal range, this\nmethod has no effect.\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\nAn error occurs if the [iterable] does not have enough objects after\nskipping [skipCount] objects.\n\nExample:\n\n    var list = [1, 2, 3, 4];\n    var list2 = [5, 6, 7, 8, 9];\n    list.setRange(1, 3, list2, 3);\n    print(list);  // => [1, 8, 9, 4]\n","name":"setRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"skipCount","name":"skipCount","kind":"param"}],"line":"334","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"removeRange2()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive.\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\nThrows an [UnsupportedError] if this is a fixed-length list.\n","name":"removeRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"}],"line":"342","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"fillRange3()","comment":"\nSets the objects in the range [start] inclusive to [end] exclusive\nto the given [fillValue].\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n","name":"fillRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"isOptional":true,"id":"fillValue","name":"fillValue","kind":"param"}],"line":"350","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"replaceRange3()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive\nand replaces them with the contents of the [iterable].\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n\nExample:\n\n    var list = [1, 2, 3, 4, 5];\n    list.replaceRange(1, 3, [6, 7, 8, 9]);\n    print(list);  // [1, 6, 7, 8, 9, 4, 5]\n","name":"replaceRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"364","kind":"method"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/int","name":"int"},{"refId":"dart.core/List/E","name":"E"}],"name":"Map"},"id":"asMap0()","comment":"\nReturns an unmodifiable [Map] view of `this`.\n\nThe map uses the indices of this list as keys and the corresponding objects\nas values. The `Map.keys` [Iterable] iterates the indices of this list\nin numerical order.\n","name":"asMap","line":"373","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","comment":"\nReturns the number of objects in this list.\n\nThe valid indices for a list are `0` through `length - 1`.\n","name":"length","line":"124","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"reversed","comment":"\nReturns an [Iterable] of the objects in this list in reverse order.\n","name":"reversed","line":"155","kind":"property"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"id":"1()","comment":"\nCreates a list of the given _length_.\n\nThe created list is fixed-length if _length_ is provided.\nThe list has length 0 and is growable if _length_ is omitted.\n\nAn error occurs if _length_ is negative.\n","name":"","children":[{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"line":"53","kind":"constructor"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"id":"filled2()","comment":"\nCreates a fixed-length list of the given _length_\nand initializes the value at each position with [fill].\n","name":"filled","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"fill","name":"fill","kind":"param"}],"line":"59","kind":"constructor"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"id":"from2()","comment":"\nCreates a list and initializes it using the contents of [other].\n\nThe [Iterator] of [other] provides the order of the objects.\n\nThis constructor returns a growable list if [growable] is true;\notherwise, it returns a fixed-length list.\n","name":"from","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"other","name":"other","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"growable","name":"growable","kind":"param"}],"line":"69","kind":"constructor"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"id":"generate3()","comment":"\nGenerates a list of values.\n\nCreates a list with _length_ positions\nand fills it with values created by calling [generator]\nfor each index in the range `0` .. `length - 1`\nin increasing order.\n\nThe created list is fixed-length unless [growable] is true.\n","name":"generate","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"generator","name":"generator","children":[{"returnType":{"refId":"dart.core/List/E","name":"E"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/list.dart","name":"index","line":"93","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"growable","name":"growable","line":"94","kind":"param"}],"line":"93","kind":"constructor"},{"id":"E","name":"E","kind":"typeparam"}],"line":"44","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Iterable","comment":"\nThe [Iterable] interface allows to get an [Iterator] out of an\n[Iterable] object.\n\nThis interface is used by the for-in construct to iterate over an\n[Iterable] object.\nThe for-in construct takes an [Iterable] object at the right-hand\nside, and calls its [iterator] method to get an [Iterator] on it.\n\nA user-defined class that implements the [Iterable] interface can\nbe used as the right-hand side of a for-in construct.\n","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"Iterable","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"map1()","comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","name":"map","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"element","line":"51","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"51","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"id":"where1()","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","name":"where","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"element","line":"63","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"63","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"expand1()","comment":"\nExpand each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable will run through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and will call [f] for each element\nof this every time it's iterated.\n","name":"expand","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"element","line":"74","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"74","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"contains1()","comment":"\nCheck whether the collection contains an element equal to [element].\n","name":"contains","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"element","name":"element","kind":"param"}],"line":"79","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"forEach1()","comment":"\nApplies the function [f] to each element of this collection.\n","name":"forEach","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"element","line":"84","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"reduce1()","comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","name":"reduce","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"combine","name":"combine","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"value","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"value","line":"95","kind":"param"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"element","line":"95","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"95","kind":"method"},{"id":"fold2()","comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","name":"fold","children":[{"id":"initialValue","name":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"combine","name":"combine","children":[{"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"previousValue","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"previousValue","line":"111","kind":"param"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"element","line":"111","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"111","kind":"param"}],"line":"110","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"every1()","comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","name":"every","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"element","line":"117","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"117","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"join1()","comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","name":"join","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","id":"separator","name":"separator","kind":"param"}],"line":"126","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"any1()","comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","name":"any","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"element","line":"136","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"136","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"List"},"id":"toList1()","comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements will be in iteration order. The list is fixed-length\nif [growable] is false.\n","name":"toList","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"growable","name":"growable","kind":"param"}],"line":"144","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Set"},"id":"toSet0()","comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","name":"toSet","line":"149","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"id":"take1()","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n\nIt is an error if [n] is negative.\n","name":"take","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"n","name":"n","kind":"param"}],"line":"177","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"id":"takeWhile1()","comment":"\nReturns an [Iterable] that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will start iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it will not\nask or provide any more elements.\n","name":"takeWhile","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"value","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"value","line":"189","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"189","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"id":"skip1()","comment":"\nReturns an [Iterable] that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting [Iterable] will\nbe empty.\n\nIt is an error if [n] is negative.\n","name":"skip","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"n","name":"n","kind":"param"}],"line":"199","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"id":"skipWhile1()","comment":"\nReturns an [Iterable] that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned [Iterable] are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","name":"skipWhile","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"value","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"value","line":"213","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"213","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"firstWhere2()","comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","name":"firstWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"element","line":"244","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"244","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"lastWhere2()","comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","name":"lastWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"element","line":"253","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"253","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"singleWhere1()","comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","name":"singleWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"element","line":"259","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"259","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"elementAt1()","comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","name":"elementAt","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"270","kind":"method"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterator"},"id":"iterator","comment":"\nReturns an [Iterator] that iterates over this [Iterable] object.\n","name":"iterator","line":"39","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","name":"length","line":"157","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isEmpty","comment":"\nReturns true if there is no element in this collection.\n","name":"isEmpty","line":"162","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isNotEmpty","comment":"\nReturns true if there is at least one element in this collection.\n","name":"isNotEmpty","line":"167","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"first","comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","name":"first","line":"221","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"last","comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","name":"last","line":"228","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"single","comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","name":"single","line":"235","kind":"property"},{"id":"0()","name":"","line":"20","kind":"constructor"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"id":"generate2()","comment":"\nCreate an [Iterable] that generates its elements dynamically.\n\nThe [Iterators] created by the [Iterable] will count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an [Iterable], [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","name":"generate","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"count","name":"count","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"generator","name":"generator","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/iterable.dart","name":"index","line":"32","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"32","kind":"constructor"},{"id":"E","name":"E","kind":"typeparam"}],"line":"19","kind":"class"}],"line":"153","kind":"library"},{"id":"dart.collection","comment":"\nClasses and utilities that supplement the collection support in dart:core.\n","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/collection.dart","name":"dart:collection","children":[{"isAbstract":true,"interfaces":[{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"IterableBase","comment":"\nBase class for implementing [Iterable].\n\nThis class implements all methods of [Iterable] except [Iterable.iterator]\nin terms of `iterator`.\n","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"IterableBase","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"map1()","name":"map","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"element","line":"204","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"204","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"id":"where1()","name":"where","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"element","line":"206","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"206","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"expand1()","name":"expand","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"element","line":"208","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"208","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"contains1()","name":"contains","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"element","name":"element","kind":"param"}],"line":"211","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"forEach1()","name":"forEach","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"element","line":"218","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"218","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"reduce1()","name":"reduce","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"combine","name":"combine","children":[{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"value","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"value","line":"222","kind":"param"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"element","line":"222","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"222","kind":"method"},{"id":"fold2()","name":"fold","children":[{"id":"initialValue","name":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"combine","name":"combine","children":[{"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"previousValue","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"previousValue","line":"235","kind":"param"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"element","line":"235","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"235","kind":"param"}],"line":"234","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"every1()","name":"every","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"element","line":"241","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"241","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"join1()","name":"join","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"separator","name":"separator","kind":"param"}],"line":"248","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"any1()","name":"any","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"element","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"element","line":"266","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"266","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"List"},"id":"toList1()","name":"toList","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"growable","name":"growable","kind":"param"}],"line":"273","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Set"},"id":"toSet0()","name":"toSet","line":"276","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"id":"take1()","name":"take","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"n","name":"n","kind":"param"}],"line":"291","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"id":"takeWhile1()","name":"takeWhile","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"value","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"value","line":"295","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"295","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"id":"skip1()","name":"skip","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"n","name":"n","kind":"param"}],"line":"299","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"id":"skipWhile1()","name":"skipWhile","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"value","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"value","line":"303","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"303","kind":"method"},{"id":"firstWhere2()","name":"firstWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"value","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"value","line":"335","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"refId":"dart.core/Object","name":"Object"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"335","kind":"method"},{"id":"lastWhere2()","name":"lastWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"value","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"value","line":"343","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"refId":"dart.core/Object","name":"Object"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"343","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"singleWhere1()","name":"singleWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"value","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/collection/iterable.dart","name":"value","line":"357","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"357","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"elementAt1()","name":"elementAt","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"373","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","line":"278","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isEmpty","name":"isEmpty","line":"287","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isNotEmpty","name":"isNotEmpty","line":"289","kind":"property"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"first","name":"first","line":"307","kind":"property"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"last","name":"last","line":"315","kind":"property"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"id":"single","name":"single","line":"327","kind":"property"},{"id":"0()","name":"","line":"202","kind":"constructor"},{"id":"E","name":"E","kind":"typeparam"}],"line":"199","kind":"class"}],"line":"8","kind":"library"}],"id":"unmodifiable_collection","comment":"\nUnmodifiable wrappers for [List], [Set] and [Map] objects.\n\nThe wrappers allow reading from the source list, but writing is prohibited.\n\nA non-growable list wrapper allows writing as well, but not changing the\nlist's length.\n","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"package:unmodifiable_collection/unmodifiable_collection.dart","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"_IterableView","name":"_IterableView","isPrivate":true,"children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"any1()","name":"any","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"177","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"177","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"contains1()","name":"contains","children":[{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"element","name":"element","kind":"param"}],"line":"179","kind":"method"},{"returnType":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"elementAt1()","name":"elementAt","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"181","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"every1()","name":"every","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"183","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"183","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"expand1()","name":"expand","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"185","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"185","kind":"method"},{"returnType":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"firstWhere2()","name":"firstWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"189","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"189","kind":"method"},{"id":"fold2()","name":"fold","children":[{"id":"initialValue","name":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"combine","name":"combine","children":[{"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"previousValue","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"previousValue","line":"193","kind":"param"},{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"193","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"193","kind":"param"}],"line":"192","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"forEach1()","name":"forEach","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"196","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"196","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"join1()","name":"join","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","id":"separator","name":"separator","kind":"param"}],"line":"204","kind":"method"},{"returnType":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"lastWhere2()","name":"lastWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"208","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"208","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"map1()","name":"map","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"213","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"213","kind":"method"},{"returnType":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"reduce1()","name":"reduce","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"combine","name":"combine","children":[{"returnType":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"value","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"value","line":"215","kind":"param"},{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"215","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"215","kind":"method"},{"returnType":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"singleWhere1()","name":"singleWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"219","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"219","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/_IterableView/E","name":"E"}],"name":"Iterable"},"id":"skip1()","name":"skip","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"n","name":"n","kind":"param"}],"line":"221","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/_IterableView/E","name":"E"}],"name":"Iterable"},"id":"skipWhile1()","name":"skipWhile","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"value","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"value","line":"223","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"223","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/_IterableView/E","name":"E"}],"name":"Iterable"},"id":"take1()","name":"take","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"n","name":"n","kind":"param"}],"line":"225","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/_IterableView/E","name":"E"}],"name":"Iterable"},"id":"takeWhile1()","name":"takeWhile","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"value","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"value","line":"227","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"227","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"unmodifiable_collection/_IterableView/E","name":"E"}],"name":"List"},"id":"toList1()","name":"toList","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"growable","name":"growable","kind":"param"}],"line":"229","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"unmodifiable_collection/_IterableView/E","name":"E"}],"name":"Set"},"id":"toSet0()","name":"toSet","line":"231","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/_IterableView/E","name":"E"}],"name":"Iterable"},"id":"where1()","name":"where","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"233","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"233","kind":"method"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/_IterableView/E","name":"E"}],"name":"Iterable"},"id":"_source","name":"_source","isPrivate":true,"line":"175","kind":"property"},{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"first","name":"first","line":"187","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isEmpty","name":"isEmpty","line":"198","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isNotEmpty","name":"isNotEmpty","line":"200","kind":"property"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"unmodifiable_collection/_IterableView/E","name":"E"}],"name":"Iterator"},"id":"iterator","name":"iterator","line":"202","kind":"property"},{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"last","name":"last","line":"206","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","line":"211","kind":"property"},{"ref":{"refId":"unmodifiable_collection/_IterableView/E","name":"E"},"id":"single","name":"single","line":"217","kind":"property"},{"id":"E","name":"E","kind":"typeparam"}],"line":"174","kind":"class"},{"interfaces":[{"refId":"dart.core/Map","arguments":[{"refId":"unmodifiable_collection/UnmodifiableMapView/K","name":"K"},{"refId":"unmodifiable_collection/UnmodifiableMapView/V","name":"V"}],"name":"Map"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"UnmodifiableMapView","comment":"\nA [Map] wrapper that acts as an unmodifiable map.\n","name":"UnmodifiableMapView","children":[{"returnType":{"refId":"void","name":"void"},"isStatic":true,"id":"_throw0()","name":"_throw","isPrivate":true,"line":"140","kind":"method"},{"returnType":{"refId":"unmodifiable_collection/UnmodifiableMapView/V","name":"V"},"isOperator":true,"id":"[]1()","name":"[]","children":[{"ref":{"refId":"unmodifiable_collection/UnmodifiableMapView/K","name":"K"},"id":"key","name":"key","kind":"param"}],"line":"150","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"containsKey1()","name":"containsKey","children":[{"ref":{"refId":"unmodifiable_collection/UnmodifiableMapView/K","name":"K"},"id":"key","name":"key","kind":"param"}],"line":"152","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"containsValue1()","name":"containsValue","children":[{"ref":{"refId":"unmodifiable_collection/UnmodifiableMapView/V","name":"V"},"id":"value","name":"value","kind":"param"}],"line":"154","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"forEach1()","name":"forEach","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/UnmodifiableMapView/K","name":"K"},"id":"key","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"key","line":"156","kind":"param"},{"ref":{"refId":"unmodifiable_collection/UnmodifiableMapView/V","name":"V"},"id":"value","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"value","line":"156","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"156","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"id":"[]=2()","name":"[]=","children":[{"ref":{"refId":"unmodifiable_collection/UnmodifiableMapView/K","name":"K"},"id":"key","name":"key","kind":"param"},{"ref":{"refId":"unmodifiable_collection/UnmodifiableMapView/V","name":"V"},"id":"value","name":"value","kind":"param"}],"line":"163","kind":"method"},{"returnType":{"refId":"unmodifiable_collection/UnmodifiableMapView/V","name":"V"},"id":"putIfAbsent2()","name":"putIfAbsent","children":[{"ref":{"refId":"unmodifiable_collection/UnmodifiableMapView/K","name":"K"},"id":"key","name":"key","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"ifAbsent","name":"ifAbsent","children":[{"returnType":{"refId":"unmodifiable_collection/UnmodifiableMapView/V","name":"V"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"165","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"addAll1()","name":"addAll","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"unmodifiable_collection/UnmodifiableMapView/K","name":"K"},{"refId":"unmodifiable_collection/UnmodifiableMapView/V","name":"V"}],"name":"Map"},"id":"other","name":"other","kind":"param"}],"line":"167","kind":"method"},{"returnType":{"refId":"unmodifiable_collection/UnmodifiableMapView/V","name":"V"},"id":"remove1()","name":"remove","children":[{"ref":{"refId":"unmodifiable_collection/UnmodifiableMapView/K","name":"K"},"id":"key","name":"key","kind":"param"}],"line":"169","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"clear0()","name":"clear","line":"171","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","line":"144","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isEmpty","name":"isEmpty","line":"146","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isNotEmpty","name":"isNotEmpty","line":"148","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/UnmodifiableMapView/K","name":"K"}],"name":"Iterable"},"id":"keys","name":"keys","line":"158","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/UnmodifiableMapView/V","name":"V"}],"name":"Iterable"},"id":"values","name":"values","line":"160","kind":"property"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"unmodifiable_collection/UnmodifiableMapView/K","name":"K"},{"refId":"unmodifiable_collection/UnmodifiableMapView/V","name":"V"}],"name":"Map"},"id":"_source","name":"_source","isPrivate":true,"line":"137","kind":"variable"},{"id":"1()","name":"","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"unmodifiable_collection/UnmodifiableMapView/K","name":"K"},{"refId":"unmodifiable_collection/UnmodifiableMapView/V","name":"V"}],"name":"Map"},"id":"source","name":"source","kind":"param"}],"line":"138","kind":"constructor"},{"id":"K","name":"K","kind":"typeparam"},{"id":"V","name":"V","kind":"typeparam"}],"line":"136","kind":"class"},{"interfaces":[{"refId":"dart.core/Set","arguments":[{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"}],"name":"Set"}],"superclass":{"refId":"unmodifiable_collection/_IterableView","arguments":[{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"}],"name":"_IterableView"},"id":"UnmodifiableSetView","comment":"\nA [Set] wrapper that acts as an unmodifiable set.\n","name":"UnmodifiableSetView","children":[{"returnType":{"refId":"void","name":"void"},"id":"_throw0()","name":"_throw","isPrivate":true,"line":"103","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"containsAll1()","name":"containsAll","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"}],"name":"Iterable"},"id":"other","name":"other","kind":"param"}],"line":"107","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"}],"name":"Set"},"id":"intersection1()","name":"intersection","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"}],"name":"Set"},"id":"other","name":"other","kind":"param"}],"line":"109","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"}],"name":"Set"},"id":"union1()","name":"union","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"}],"name":"Set"},"id":"other","name":"other","kind":"param"}],"line":"111","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"}],"name":"Set"},"id":"difference1()","name":"difference","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"}],"name":"Set"},"id":"other","name":"other","kind":"param"}],"line":"113","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"add1()","name":"add","children":[{"ref":{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"},"id":"value","name":"value","kind":"param"}],"line":"116","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"addAll1()","name":"addAll","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"}],"name":"Iterable"},"id":"elements","name":"elements","kind":"param"}],"line":"118","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"remove1()","name":"remove","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"value","name":"value","kind":"param"}],"line":"120","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"removeAll1()","name":"removeAll","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"elements","name":"elements","kind":"param"}],"line":"122","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"retainAll1()","name":"retainAll","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"elements","name":"elements","kind":"param"}],"line":"124","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"removeWhere1()","name":"removeWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"126","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"126","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"retainWhere1()","name":"retainWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"128","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"128","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"clear0()","name":"clear","line":"130","kind":"method"},{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"}],"name":"Set"},"id":"_source","name":"_source","isPrivate":true,"line":"100","kind":"variable"},{"id":"1()","name":"","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"unmodifiable_collection/UnmodifiableSetView/E","name":"E"}],"name":"Set"},"id":"source","name":"source","kind":"param"}],"line":"101","kind":"constructor"},{"id":"E","name":"E","kind":"typeparam"}],"line":"98","kind":"class"},{"interfaces":[{"refId":"dart.core/List","arguments":[{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"}],"name":"List"}],"superclass":{"refId":"unmodifiable_collection/_IterableView","arguments":[{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"}],"name":"_IterableView"},"id":"NonGrowableListView","comment":"\nA [List] wrapper that acts as a non-growable list.\n\nWrites to the list are written through to the source list, but operations\nthat change the length is not allowed.\n","name":"NonGrowableListView","children":[{"returnType":{"refId":"void","name":"void"},"isStatic":true,"id":"_throw0()","name":"_throw","isPrivate":true,"line":"28","kind":"method"},{"returnType":{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"},"isOperator":true,"id":"[]1()","name":"[]","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"id":"indexOf2()","name":"indexOf","children":[{"ref":{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"},"id":"element","name":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"start","name":"start","kind":"param"}],"line":"37","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"id":"lastIndexOf2()","name":"lastIndexOf","children":[{"ref":{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"},"id":"element","name":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"id":"start","name":"start","kind":"param"}],"line":"39","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"}],"name":"Iterable"},"id":"getRange2()","name":"getRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"}],"line":"42","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"}],"name":"List"},"id":"sublist2()","name":"sublist","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"id":"end","name":"end","kind":"param"}],"line":"44","kind":"method"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/int","name":"int"},{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"}],"name":"Map"},"id":"asMap0()","name":"asMap","line":"48","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"id":"[]=2()","name":"[]=","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"},"id":"value","name":"value","kind":"param"}],"line":"51","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"sort1()","name":"sort","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"compare","name":"compare","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"},"id":"a","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"a","line":"53","kind":"param"},{"ref":{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"},"id":"b","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"b","line":"53","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"53","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"setRange4()","name":"setRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"skipCount","name":"skipCount","kind":"param"}],"line":"55","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"fillRange3()","name":"fillRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"},{"ref":{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"},"isOptional":true,"id":"fillValue","name":"fillValue","kind":"param"}],"line":"59","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"setAll2()","name":"setAll","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"63","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isSetter":true,"id":"length=1()","name":"length=","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"newLength","name":"newLength","kind":"param"}],"line":"68","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"add1()","name":"add","children":[{"ref":{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"},"id":"value","name":"value","kind":"param"}],"line":"70","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"addAll1()","name":"addAll","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"72","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"insert2()","name":"insert","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"},"id":"element","name":"element","kind":"param"}],"line":"74","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"insertAll2()","name":"insertAll","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"76","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"remove1()","name":"remove","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"value","name":"value","kind":"param"}],"line":"78","kind":"method"},{"returnType":{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"},"id":"removeAt1()","name":"removeAt","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"80","kind":"method"},{"returnType":{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"},"id":"removeLast0()","name":"removeLast","line":"82","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"removeWhere1()","name":"removeWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"84","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"retainWhere1()","name":"retainWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/26619/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"},"id":"element","uri":"package:unmodifiable_collection/unmodifiable_collection.dart","name":"element","line":"86","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"86","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"removeRange2()","name":"removeRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"}],"line":"88","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"replaceRange3()","name":"replaceRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"90","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"clear0()","name":"clear","line":"92","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","line":"33","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"}],"name":"Iterable"},"id":"reversed","name":"reversed","line":"46","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"}],"name":"List"},"id":"_source","name":"_source","isPrivate":true,"line":"25","kind":"variable"},{"id":"1()","name":"","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"unmodifiable_collection/NonGrowableListView/E","name":"E"}],"name":"List"},"id":"source","name":"source","kind":"param"}],"line":"26","kind":"constructor"},{"id":"E","name":"E","kind":"typeparam"}],"line":"23","kind":"class"}],"line":"13","kind":"library"}