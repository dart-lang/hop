{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nEverything in Dart is an [Object].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"48"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"67"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"79"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"62"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"84"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"file:///usr/local/Cellar/dart-editor/27025/dart-sdk/lib/core/object.dart","line":"10"}],"uri":"file:///usr/local/Cellar/dart-editor/27025/dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","name":"package:args/args.dart","id":"args","comment":"\nThis library lets you define parsers for parsing raw command-line arguments\ninto a set of options and values using [GNU][] and [POSIX][] style options.\n\n## Installing ##\n\nUse [pub][] to install this package. Add the following to your `pubspec.yaml`\nfile.\n\n    dependencies:\n      args: any\n\nThen run `pub install`.\n\nFor more information, see the\n[args package on pub.dartlang.org](http://pub.dartlang.org/packages/args).\n\n## Defining options ##\n\nTo use this library, you create an [ArgParser] object which will contain\nthe set of options you support:\n\n    var parser = new ArgParser();\n\nThen you define a set of options on that parser using [addOption()] and\n[addFlag()]. The minimal way to create an option is:\n\n    parser.addOption('name');\n\nThis creates an option named \"name\". Options must be given a value on the\ncommand line. If you have a simple on/off flag, you can instead use:\n\n    parser.addFlag('name');\n\nFlag options will, by default, accept a 'no-' prefix to negate the option.\nThis can be disabled like so:\n\n    parser.addFlag('name', negatable: false);\n\n(From here on out \"option\" will refer to both \"regular\" options and flags.\nIn cases where the distinction matters, we'll use \"non-flag option\".)\n\nOptions may have an optional single-character abbreviation:\n\n    parser.addOption('mode', abbr: 'm');\n    parser.addFlag('verbose', abbr: 'v');\n\nThey may also specify a default value. The default value will be used if the\noption isn't provided:\n\n    parser.addOption('mode', defaultsTo: 'debug');\n    parser.addFlag('verbose', defaultsTo: false);\n\nThe default value for non-flag options can be any [String]. For flags, it\nmust be a [bool].\n\nTo validate non-flag options, you may provide an allowed set of values. When\nyou do, it will throw a [FormatException] when you parse the arguments if\nthe value for an option is not in the allowed set:\n\n    parser.addOption('mode', allowed: ['debug', 'release']);\n\nYou can provide a callback when you define an option. When you later parse\na set of arguments, the callback for that option will be invoked with the\nvalue provided for it:\n\n    parser.addOption('mode', callback: (mode) => print('Got mode $mode));\n    parser.addFlag('verbose', callback: (verbose) {\n      if (verbose) print('Verbose');\n    });\n\nThe callback for each option will *always* be called when you parse a set of\narguments. If the option isn't provided in the args, the callback will be\npassed the default value, or `null` if there is none set.\n\n## Parsing arguments ##\n\nOnce you have an [ArgParser] set up with some options and flags, you use it\nby calling [ArgParser.parse()] with a set of arguments:\n\n    var results = parser.parse(['some', 'command', 'line', 'args']);\n\nThese will usually come from `new Options().arguments`, but you can pass in\nany list of strings. It returns an instance of [ArgResults]. This is a\nmap-like object that will return the value of any parsed option.\n\n    var parser = new ArgParser();\n    parser.addOption('mode');\n    parser.addFlag('verbose', defaultsTo: true);\n    var results = parser.parse('['--mode', 'debug', 'something', 'else']);\n\n    print(results['mode']); // debug\n    print(results['verbose']); // true\n\nThe [parse()] method will stop as soon as it reaches `--` or anything that\nit doesn't recognize as an option, flag, or option value. If there are still\narguments left, they will be provided to you in\n[ArgResults.rest].\n\n    print(results.rest); // ['something', 'else']\n\n## Specifying options ##\n\nTo actually pass in options and flags on the command line, use GNU or POSIX\nstyle. If you define an option like:\n\n    parser.addOption('name', abbr: 'n');\n\nThen a value for it can be specified on the command line using any of:\n\n    --name=somevalue\n    --name somevalue\n    -nsomevalue\n    -n somevalue\n\nGiven this flag:\n\n    parser.addFlag('name', abbr: 'n');\n\nYou can set it on using one of:\n\n    --name\n    -n\n\nOr set it off using:\n\n    --no-name\n\nMultiple flag abbreviation can also be collapsed into a single argument. If\nyou define:\n\n    parser.addFlag('verbose', abbr: 'v');\n    parser.addFlag('french', abbr: 'f');\n    parser.addFlag('iambic-pentameter', abbr: 'i');\n\nThen all three flags could be set using:\n\n    -vfi\n\nBy default, an option has only a single value, with later option values\noverriding earlier ones; for example:\n\n    var parser = new ArgParser();\n    parser.addOption('mode');\n    var results = parser.parse(['--mode', 'on', '--mode', 'off']);\n    print(results['mode']); // prints 'off'\n\nIf you need multiple values, set the [allowMultiple] flag. In that\ncase the option can occur multiple times and when parsing arguments a\nList of values will be returned:\n\n    var parser = new ArgParser();\n    parser.addOption('mode', allowMultiple: true);\n    var results = parser.parse(['--mode', 'on', '--mode', 'off']);\n    print(results['mode']); // prints '[on, off]'\n\n## Defining commands ##\n\nIn addition to *options*, you can also define *commands*. A command is a\nnamed argument that has its own set of options. For example, when you run:\n\n    $ git commit -a\n\nThe executable is `git`, the command is `commit`, and the `-a` option is an\noption passed to the command. You can add a command like so:\n\n    var parser = new ArgParser();\n    var command = parser.addCommand('commit');\n\nIt returns another [ArgParser] which you can then use to define options\nspecific to that command. If you already have an [ArgParser] for the\ncommand's options, you can pass it to [addCommand]:\n\n    var parser = new ArgParser();\n    var command = new ArgParser();\n    parser.addCommand('commit', command);\n\nThe [ArgParser] for a command can then define whatever options or flags:\n\n    command.addFlag('all', abbr: 'a');\n\nYou can add multiple commands to the same parser so that a user can select\none from a range of possible commands. When an argument list is parsed,\nyou can then determine which command was entered and what options were\nprovided for it.\n\n    var results = parser.parse(['commit', '-a']);\n    print(results.command.name); // \"commit\"\n    print(results.command['a']); // true\n\nOptions for a command must appear after the command in the argument list.\nFor example, given the above parser, \"git -a commit\" is *not* valid. The\nparser will try to find the right-most command that accepts an option. For\nexample:\n\n    var parser = new ArgParser();\n    parser.addFlag('all', abbr: 'a');\n    var command = new ArgParser().addCommand('commit');\n    parser.addFlag('all', abbr: 'a');\n    var results = parser.parse(['commit', '-a']);\n    print(results.command['a']); // true\n\nHere, both the top-level parser and the \"commit\" command can accept a \"-a\"\n(which is probably a bad command line interface, admittedly). In that case,\nwhen \"-a\" appears after \"commit\", it will be applied to that command. If it\nappears to the left of \"commit\", it will be given to the top-level parser.\n\n## Displaying usage ##\n\nThis library can also be used to automatically generate nice usage help\ntext like you get when you run a program with `--help`. To use this, you\nwill also want to provide some help text when you create your options. To\ndefine help text for the entire option, do:\n\n    parser.addOption('mode', help: 'The compiler configuration',\n        allowed: ['debug', 'release']);\n    parser.addFlag('verbose', help: 'Show additional diagnostic info');\n\nFor non-flag options, you can also provide detailed help for each expected\nvalue using a map:\n\n    parser.addOption('arch', help: 'The architecture to compile for',\n        allowedHelp: {\n          'ia32': 'Intel x86',\n          'arm': 'ARM Holding 32-bit chip'\n        });\n\nIf you define a set of options like the above, then calling this:\n\n    print(parser.getUsage());\n\nWill display something like:\n\n    --mode            The compiler configuration\n                      [debug, release]\n\n    --[no-]verbose    Show additional diagnostic info\n    --arch            The architecture to compile for\n\n          [arm]       ARM Holding 32-bit chip\n          [ia32]      Intel x86\n\nTo assist the formatting of the usage help, single line help text will\nbe followed by a single new line. Options with multi-line help text\nwill be followed by two new lines. This provides spatial diversity between\noptions.\n\n[posix]: http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02\n[gnu]: http://www.gnu.org/prep/standards/standards.html#Command_002dLine-Interfaces\n[pub]: http://pub.dartlang.org\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"ArgResults","id":"ArgResults","comment":"\nThe results of parsing a series of command line arguments using\n[ArgParser.parse()]. Includes the parsed options and any remaining unparsed\ncommand line arguments.\n","children":[{"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"Gets the parsed command-line option named [name]. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"436"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"options","id":"options","comment":"Get the names of the options as an [Iterable]. ","line":"446"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"_options","id":"_options","isPrivate":true,"line":"410"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"name","id":"name","comment":"\nIf these are the results for parsing a command's options, this will be\nthe name of the command. For top-level results, this returns `null`.\n","line":"416"},{"ref":{"name":"ArgResults","refId":"args/ArgResults"},"isFinal":true,"kind":"variable","name":"command","id":"command","comment":"\nThe command that was selected, or `null` if none was. This will contain\nthe options that were selected for that command.\n","line":"422"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"rest","id":"rest","comment":"\nThe remaining command-line arguments that were not parsed as options or\nflags. If `--` was used to separate the options from the remaining\narguments, it will not be included in this list.\n","line":"429"},{"kind":"constructor","name":"","id":"4()","comment":"Creates a new [ArgResults]. ","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]},"initializedField":{"name":"_options","refId":"args/ArgResults/_options"},"kind":"param","name":"_options","id":"_options","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"name","refId":"args/ArgResults/name"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"ArgResults","refId":"args/ArgResults"},"initializedField":{"name":"command","refId":"args/ArgResults/command"},"kind":"param","name":"command","id":"command"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"rest","id":"rest"}],"line":"432"}],"line":"409"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"ArgParser","id":"ArgParser","comment":"\nA class for taking a list of raw command line arguments and parsing out\noptions and flags from them.\n","children":[{"returnType":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"method","name":"addCommand","id":"addCommand2()","comment":"\nDefines a command.\n\nA command is a named argument which may in turn define its own options and\nsubcommands using the given parser. If [parser] is omitted, implicitly\ncreates a new one. Returns the parser for the command.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"ArgParser","refId":"args/ArgParser"},"isOptional":true,"kind":"param","name":"parser","id":"parser"}],"line":"300"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addFlag","id":"addFlag6()","comment":"\nDefines a flag. Throws an [ArgumentError] if:\n\n* There is already an option named [name].\n* There is already an option using abbreviation [abbr].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"abbr","id":"abbr"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"defaultsTo","id":"defaultsTo"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"negatable","id":"negatable","line":"318"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"callback","id":"callback","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value","uri":"package:args/args.dart","line":"318"}],"uri":"file:///usr/local/Cellar/dart-editor/27025/dart-sdk/lib/core/function.dart","line":"13"}],"line":"318"}],"line":"317"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addOption","id":"addOption8()","comment":"\nDefines a value-taking option. Throws an [ArgumentError] if:\n\n* There is already an option with name [name].\n* There is already an option using abbreviation [abbr].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"abbr","id":"abbr"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"allowed","id":"allowed"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"allowedHelp","id":"allowedHelp","line":"330"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"defaultsTo","id":"defaultsTo","line":"330"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"callback","id":"callback","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"value","id":"value","uri":"package:args/args.dart","line":"331"}],"uri":"file:///usr/local/Cellar/dart-editor/27025/dart-sdk/lib/core/function.dart","line":"13"}],"line":"331"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"allowMultiple","id":"allowMultiple","line":"331"}],"line":"329"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addOption","id":"_addOption10()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"abbr","id":"abbr"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"help","id":"help"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"allowed","id":"allowed"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"allowedHelp","id":"allowedHelp","line":"337"},{"kind":"param","name":"defaultsTo","id":"defaultsTo","line":"337"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"value","id":"value","uri":"package:args/args.dart","line":"338"}],"uri":"file:///usr/local/Cellar/dart-editor/27025/dart-sdk/lib/core/function.dart","line":"13"}],"line":"338"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"isFlag","id":"isFlag","line":"338"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"negatable","id":"negatable","line":"338"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"allowMultiple","id":"allowMultiple","line":"339"}],"isPrivate":true,"line":"336"},{"returnType":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"method","name":"parse","id":"parse2()","comment":"\nParses [args], a list of command-line arguments, matches them against the\nflags and options defined by this parser, and returns the result.\n\nIf [allowTrailingOptions] is set, the parser will continue parsing even\nafter it finds an argument that is neither an option nor a command.\nThis allows options to be specified after regular arguments.\n\n[allowTrailingOptions] is false by default, so when a non-option,\nnon-command argument is encountered, it and all remaining arguments,\neven those that look like options are passed to the innermost command.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"args","id":"args"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"allowTrailingOptions","id":"allowTrailingOptions"}],"line":"371"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"getUsage","id":"getUsage0()","comment":"\nGenerates a string displaying usage information for the defined options.\nThis is basically the help text shown on the command line.\n","line":"381"},{"kind":"method","name":"getDefault","id":"getDefault1()","comment":"\nGet the default value for an option. Useful after parsing to test\nif the user specified something other than the default.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"option","id":"option"}],"line":"387"},{"returnType":{"name":"Option","refId":"options/Option"},"kind":"method","name":"findByAbbreviation","id":"findByAbbreviation1()","comment":"\nFinds the option whose abbreviation is [abbr], or `null` if no option has\nthat abbreviation.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"abbr","id":"abbr"}],"line":"398"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Option","refId":"options/Option"}]},"isFinal":true,"kind":"variable","name":"_options","id":"_options","isPrivate":true,"line":"270"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"ArgParser","refId":"args/ArgParser"}]},"isFinal":true,"kind":"variable","name":"_commands","id":"_commands","isPrivate":true,"line":"271"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Option","refId":"options/Option"}]},"isFinal":true,"kind":"variable","name":"options","id":"options","comment":"\nThe options that have been defined for this parser.\n","line":"276"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"ArgParser","refId":"args/ArgParser"}]},"isFinal":true,"kind":"variable","name":"commands","id":"commands","comment":"\nThe commands that have been defined for this parser.\n","line":"281"},{"returnType":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"constructor","name":"","id":"0()","comment":"Creates a new ArgParser. ","line":"284"},{"kind":"constructor","name":"_","id":"_2()","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Option","refId":"options/Option"}]},"kind":"param","name":"options","id":"options"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"ArgParser","refId":"args/ArgParser"}]},"kind":"param","name":"commands","id":"commands"}],"isPrivate":true,"line":"287"}],"line":"269"}],"uri":"package:args/args.dart","line":"256"}