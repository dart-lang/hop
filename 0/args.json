{"dependencies":[{"id":"dart.core","uri":"file:///usr/local/Cellar/dart-editor/25990/dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"file:///usr/local/Cellar/dart-editor/25990/dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"48","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"65","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"id":"args","comment":"\nThis library lets you define parsers for parsing raw command-line arguments\ninto a set of options and values using [GNU][] and [POSIX][] style options.\n\n## Installing ##\n\nUse [pub][] to install this package. Add the following to your `pubspec.yaml`\nfile.\n\n    dependencies:\n      args: any\n\nThen run `pub install`.\n\nFor more information, see the\n[args package on pub.dartlang.org](http://pub.dartlang.org/packages/args).\n\n## Defining options ##\n\nTo use this library, you create an [ArgParser] object which will contain\nthe set of options you support:\n\n    var parser = new ArgParser();\n\nThen you define a set of options on that parser using [addOption()] and\n[addFlag()]. The minimal way to create an option is:\n\n    parser.addOption('name');\n\nThis creates an option named \"name\". Options must be given a value on the\ncommand line. If you have a simple on/off flag, you can instead use:\n\n    parser.addFlag('name');\n\nFlag options will, by default, accept a 'no-' prefix to negate the option.\nThis can be disabled like so:\n\n    parser.addFlag('name', negatable: false);\n\n(From here on out \"option\" will refer to both \"regular\" options and flags.\nIn cases where the distinction matters, we'll use \"non-flag option\".)\n\nOptions may have an optional single-character abbreviation:\n\n    parser.addOption('mode', abbr: 'm');\n    parser.addFlag('verbose', abbr: 'v');\n\nThey may also specify a default value. The default value will be used if the\noption isn't provided:\n\n    parser.addOption('mode', defaultsTo: 'debug');\n    parser.addFlag('verbose', defaultsTo: false);\n\nThe default value for non-flag options can be any [String]. For flags, it\nmust be a [bool].\n\nTo validate non-flag options, you may provide an allowed set of values. When\nyou do, it will throw a [FormatException] when you parse the arguments if\nthe value for an option is not in the allowed set:\n\n    parser.addOption('mode', allowed: ['debug', 'release']);\n\nYou can provide a callback when you define an option. When you later parse\na set of arguments, the callback for that option will be invoked with the\nvalue provided for it:\n\n    parser.addOption('mode', callback: (mode) => print('Got mode $mode));\n    parser.addFlag('verbose', callback: (verbose) {\n      if (verbose) print('Verbose');\n    });\n\nThe callback for each option will *always* be called when you parse a set of\narguments. If the option isn't provided in the args, the callback will be\npassed the default value, or `null` if there is none set.\n\n## Parsing arguments ##\n\nOnce you have an [ArgParser] set up with some options and flags, you use it\nby calling [ArgParser.parse()] with a set of arguments:\n\n    var results = parser.parse(['some', 'command', 'line', 'args']);\n\nThese will usually come from `new Options().arguments`, but you can pass in\nany list of strings. It returns an instance of [ArgResults]. This is a\nmap-like object that will return the value of any parsed option.\n\n    var parser = new ArgParser();\n    parser.addOption('mode');\n    parser.addFlag('verbose', defaultsTo: true);\n    var results = parser.parse('['--mode', 'debug', 'something', 'else']);\n\n    print(results['mode']); // debug\n    print(results['verbose']); // true\n\nThe [parse()] method will stop as soon as it reaches `--` or anything that\nit doesn't recognize as an option, flag, or option value. If there are still\narguments left, they will be provided to you in\n[ArgResults.rest].\n\n    print(results.rest); // ['something', 'else']\n\n## Specifying options ##\n\nTo actually pass in options and flags on the command line, use GNU or POSIX\nstyle. If you define an option like:\n\n    parser.addOption('name', abbr: 'n');\n\nThen a value for it can be specified on the command line using any of:\n\n    --name=somevalue\n    --name somevalue\n    -nsomevalue\n    -n somevalue\n\nGiven this flag:\n\n    parser.addFlag('name', abbr: 'n');\n\nYou can set it on using one of:\n\n    --name\n    -n\n\nOr set it off using:\n\n    --no-name\n\nMultiple flag abbreviation can also be collapsed into a single argument. If\nyou define:\n\n    parser.addFlag('verbose', abbr: 'v');\n    parser.addFlag('french', abbr: 'f');\n    parser.addFlag('iambic-pentameter', abbr: 'i');\n\nThen all three flags could be set using:\n\n    -vfi\n\nBy default, an option has only a single value, with later option values\noverriding earlier ones; for example:\n\n    var parser = new ArgParser();\n    parser.addOption('mode');\n    var results = parser.parse(['--mode', 'on', '--mode', 'off']);\n    print(results['mode']); // prints 'off'\n\nIf you need multiple values, set the [allowMultiple] flag. In that\ncase the option can occur multiple times and when parsing arguments a\nList of values will be returned:\n\n    var parser = new ArgParser();\n    parser.addOption('mode', allowMultiple: true);\n    var results = parser.parse(['--mode', 'on', '--mode', 'off']);\n    print(results['mode']); // prints '[on, off]'\n\n## Defining commands ##\n\nIn addition to *options*, you can also define *commands*. A command is a\nnamed argument that has its own set of options. For example, when you run:\n\n    $ git commit -a\n\nThe executable is `git`, the command is `commit`, and the `-a` option is an\noption passed to the command. You can add a command like so:\n\n    var parser = new ArgParser();\n    var command = parser.addCommand('commit');\n\nIt returns another [ArgParser] which you can then use to define options\nspecific to that command. If you already have an [ArgParser] for the\ncommand's options, you can pass it to [addCommand]:\n\n    var parser = new ArgParser();\n    var command = new ArgParser();\n    parser.addCommand('commit', command);\n\nThe [ArgParser] for a command can then define whatever options or flags:\n\n    command.addFlag('all', abbr: 'a');\n\nYou can add multiple commands to the same parser so that a user can select\none from a range of possible commands. When an argument list is parsed,\nyou can then determine which command was entered and what options were\nprovided for it.\n\n    var results = parser.parse(['commit', '-a']);\n    print(results.command.name); // \"commit\"\n    print(results.command['a']); // true\n\nOptions for a command must appear after the command in the argument list.\nFor example, given the above parser, \"git -a commit\" is *not* valid. The\nparser will try to find the right-most command that accepts an option. For\nexample:\n\n    var parser = new ArgParser();\n    parser.addFlag('all', abbr: 'a');\n    var command = new ArgParser().addCommand('commit');\n    parser.addFlag('all', abbr: 'a');\n    var results = parser.parse(['commit', '-a']);\n    print(results.command['a']); // true\n\nHere, both the top-level parser and the \"commit\" command can accept a \"-a\"\n(which is probably a bad command line interface, admittedly). In that case,\nwhen \"-a\" appears after \"commit\", it will be applied to that command. If it\nappears to the left of \"commit\", it will be given to the top-level parser.\n\n## Displaying usage ##\n\nThis library can also be used to automatically generate nice usage help\ntext like you get when you run a program with `--help`. To use this, you\nwill also want to provide some help text when you create your options. To\ndefine help text for the entire option, do:\n\n    parser.addOption('mode', help: 'The compiler configuration',\n        allowed: ['debug', 'release']);\n    parser.addFlag('verbose', help: 'Show additional diagnostic info');\n\nFor non-flag options, you can also provide detailed help for each expected\nvalue using a map:\n\n    parser.addOption('arch', help: 'The architecture to compile for',\n        allowedHelp: {\n          'ia32': 'Intel x86',\n          'arm': 'ARM Holding 32-bit chip'\n        });\n\nIf you define a set of options like the above, then calling this:\n\n    print(parser.getUsage());\n\nWill display something like:\n\n    --mode            The compiler configuration\n                      [debug, release]\n\n    --[no-]verbose    Show additional diagnostic info\n    --arch            The architecture to compile for\n\n          [arm]       ARM Holding 32-bit chip\n          [ia32]      Intel x86\n\nTo assist the formatting of the usage help, single line help text will\nbe followed by a single new line. Options with multi-line help text\nwill be followed by two new lines. This provides spatial diversity between\noptions.\n\n[posix]: http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02\n[gnu]: http://www.gnu.org/prep/standards/standards.html#Command_002dLine-Interfaces\n[pub]: http://pub.dartlang.org\n","uri":"package:args/args.dart","name":"package:args/args.dart","children":[{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"ArgResults","comment":"\nThe results of parsing a series of command line arguments using\n[ArgParser.parse()]. Includes the parsed options and any remaining unparsed\ncommand line arguments.\n","name":"ArgResults","children":[{"isOperator":true,"id":"[]1()","comment":"Gets the parsed command-line option named [name]. ","name":"[]","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"name","name":"name","kind":"param"}],"line":"436","kind":"method"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Iterable"},"id":"options","comment":"Get the names of the options as an [Iterable]. ","name":"options","line":"446","kind":"property"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Map"},"isFinal":true,"id":"_options","name":"_options","isPrivate":true,"line":"410","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"id":"name","comment":"\nIf these are the results for parsing a command's options, this will be\nthe name of the command. For top-level results, this returns `null`.\n","name":"name","line":"416","kind":"variable"},{"ref":{"refId":"args/ArgResults","name":"ArgResults"},"isFinal":true,"id":"command","comment":"\nThe command that was selected, or `null` if none was. This will contain\nthe options that were selected for that command.\n","name":"command","line":"422","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isFinal":true,"id":"rest","comment":"\nThe remaining command-line arguments that were not parsed as options or\nflags. If `--` was used to separate the options from the remaining\narguments, it will not be included in this list.\n","name":"rest","line":"429","kind":"variable"},{"id":"4()","comment":"Creates a new [ArgResults]. ","name":"","children":[{"initializedField":{"refId":"args/ArgResults/_options","name":"_options"},"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Map"},"id":"_options","name":"_options","isPrivate":true,"kind":"param"},{"initializedField":{"refId":"args/ArgResults/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"id":"name","name":"name","kind":"param"},{"initializedField":{"refId":"args/ArgResults/command","name":"command"},"ref":{"refId":"args/ArgResults","name":"ArgResults"},"id":"command","name":"command","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"rest","name":"rest","kind":"param"}],"line":"432","kind":"constructor"}],"line":"409","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"ArgParser","comment":"\nA class for taking a list of raw command line arguments and parsing out\noptions and flags from them.\n","name":"ArgParser","children":[{"returnType":{"refId":"args/ArgParser","name":"ArgParser"},"id":"addCommand2()","comment":"\nDefines a command.\n\nA command is a named argument which may in turn define its own options and\nsubcommands using the given parser. If [parser] is omitted, implicitly\ncreates a new one. Returns the parser for the command.\n","name":"addCommand","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"name","name":"name","kind":"param"},{"ref":{"refId":"args/ArgParser","name":"ArgParser"},"isOptional":true,"id":"parser","name":"parser","kind":"param"}],"line":"300","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"addFlag6()","comment":"\nDefines a flag. Throws an [ArgumentError] if:\n\n* There is already an option named [name].\n* There is already an option using abbreviation [abbr].\n","name":"addFlag","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"name","name":"name","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"abbr","name":"abbr","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"help","name":"help","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","id":"defaultsTo","name":"defaultsTo","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"negatable","name":"negatable","line":"318","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"callback","name":"callback","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/25990/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"value","uri":"package:args/args.dart","name":"value","line":"318","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"318","kind":"param"}],"line":"317","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"addOption8()","comment":"\nDefines a value-taking option. Throws an [ArgumentError] if:\n\n* There is already an option with name [name].\n* There is already an option using abbreviation [abbr].\n","name":"addOption","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"name","name":"name","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"abbr","name":"abbr","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"help","name":"help","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isOptional":true,"id":"allowed","name":"allowed","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"isOptional":true,"id":"allowedHelp","name":"allowedHelp","line":"330","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"defaultsTo","name":"defaultsTo","line":"330","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"callback","name":"callback","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/25990/dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"value","uri":"package:args/args.dart","name":"value","line":"331","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"331","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","id":"allowMultiple","name":"allowMultiple","line":"331","kind":"param"}],"line":"329","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_addOption10()","name":"_addOption","isPrivate":true,"children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"name","name":"name","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"abbr","name":"abbr","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"help","name":"help","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"allowed","name":"allowed","kind":"param"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"id":"allowedHelp","name":"allowedHelp","line":"337","kind":"param"},{"id":"defaultsTo","name":"defaultsTo","line":"337","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"callback","name":"callback","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/25990/dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"value","uri":"package:args/args.dart","name":"value","line":"338","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"338","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"id":"isFlag","name":"isFlag","line":"338","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","id":"negatable","name":"negatable","line":"338","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","id":"allowMultiple","name":"allowMultiple","line":"339","kind":"param"}],"line":"336","kind":"method"},{"returnType":{"refId":"args/ArgResults","name":"ArgResults"},"id":"parse2()","comment":"\nParses [args], a list of command-line arguments, matches them against the\nflags and options defined by this parser, and returns the result.\n\nIf [allowTrailingOptions] is set, the parser will continue parsing even\nafter it finds an argument that is neither an option nor a command.\nThis allows options to be specified after regular arguments.\n\n[allowTrailingOptions] is false by default, so when a non-option,\nnon-command argument is encountered, it and all remaining arguments,\neven those that look like options are passed to the innermost command.\n","name":"parse","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"args","name":"args","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"id":"allowTrailingOptions","name":"allowTrailingOptions","kind":"param"}],"line":"371","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"getUsage0()","comment":"\nGenerates a string displaying usage information for the defined options.\nThis is basically the help text shown on the command line.\n","name":"getUsage","line":"381","kind":"method"},{"id":"getDefault1()","comment":"\nGet the default value for an option. Useful after parsing to test\nif the user specified something other than the default.\n","name":"getDefault","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"option","name":"option","kind":"param"}],"line":"387","kind":"method"},{"returnType":{"refId":"options/Option","name":"Option"},"id":"findByAbbreviation1()","comment":"\nFinds the option whose abbreviation is [abbr], or `null` if no option has\nthat abbreviation.\n","name":"findByAbbreviation","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"abbr","name":"abbr","kind":"param"}],"line":"398","kind":"method"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"options/Option","name":"Option"}],"name":"Map"},"isFinal":true,"id":"_options","name":"_options","isPrivate":true,"line":"270","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"args/ArgParser","name":"ArgParser"}],"name":"Map"},"isFinal":true,"id":"_commands","name":"_commands","isPrivate":true,"line":"271","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"options/Option","name":"Option"}],"name":"Map"},"isFinal":true,"id":"options","comment":"\nThe options that have been defined for this parser.\n","name":"options","line":"276","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"args/ArgParser","name":"ArgParser"}],"name":"Map"},"isFinal":true,"id":"commands","comment":"\nThe commands that have been defined for this parser.\n","name":"commands","line":"281","kind":"variable"},{"returnType":{"refId":"args/ArgParser","name":"ArgParser"},"id":"0()","comment":"Creates a new ArgParser. ","name":"","line":"284","kind":"constructor"},{"id":"_2()","name":"_","isPrivate":true,"children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"options/Option","name":"Option"}],"name":"Map"},"id":"options","name":"options","kind":"param"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"args/ArgParser","name":"ArgParser"}],"name":"Map"},"id":"commands","name":"commands","kind":"param"}],"line":"287","kind":"constructor"}],"line":"269","kind":"class"}],"line":"256","kind":"library"}