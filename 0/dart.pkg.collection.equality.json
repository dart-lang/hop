{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"file:///Users/kevmoo/.homebrew/Cellar/dart-editor/31918/dart-sdk/lib/core/object.dart","line":"21"}],"uri":"file:///Users/kevmoo/.homebrew/Cellar/dart-editor/31918/dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","name":"package:collection/equality.dart","id":"dart.pkg.collection.equality","comment":"\nDefines equality relations on collections.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_HASH_MASK","id":"_HASH_MASK","isPrivate":true,"line":"12"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Equality","refId":"dart.pkg.collection.equality/Equality"}],"kind":"class","name":"DeepCollectionEquality","id":"DeepCollectionEquality","comment":"\nDeep equality on collections.\n\nRecognizes lists, sets, iterables and maps and compares their elements using\ndeep equality as well.\n\nNon-iterable/map objects are compared using a configurable base equality.\n\nWorks in one of two modes: ordered or unordered.\n\nIn ordered mode, lists and iterables are required to have equal elements\nin the same order. In unordered mode, the order of elements in iterables\nand lists are not importan.\n\nA list is only equal to another list, likewise for sets and maps. All other\niterables are compared as iterables only.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"equals","id":"equals2()","children":[{"kind":"param","name":"e1","id":"e1"},{"kind":"param","name":"e2","id":"e2"}],"line":"380"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"hash","id":"hash1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"406"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isValidKey","id":"isValidKey1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"418"},{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality"},"isFinal":true,"kind":"variable","name":"_base","id":"_base","isPrivate":true,"line":"366"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_unordered","id":"_unordered","isPrivate":true,"line":"367"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality"},"defaultValue":"const DefaultEquality()","isOptional":true,"kind":"param","name":"base","id":"base"}],"line":"368"},{"kind":"constructor","name":"unordered","id":"unordered1()","comment":"\nCreates a deep equality on collections where the order of lists and\niterables are not considered important. That is, lists and iterables are\ntreated as unordered iterables.\n","children":[{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality"},"defaultValue":"const DefaultEquality()","isOptional":true,"kind":"param","name":"base","id":"base","line":"377"}],"line":"376"}],"line":"365"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/MultiEquality/E"}]}],"kind":"class","name":"MultiEquality","id":"MultiEquality","comment":"\nCombines several equalities into a single equality.\n\nTries each equality in order, using [Equality.isValidKey], and returns\nthe result of the first equality that applies to the argument or arguments.\n\nFor `equals`, the first equality that matches the first argument is used,\nand if the second argument of `equals` is not valid for that equality,\nit returns false.\n\nBecause the equalities are tried in order, they should generally work on\ndisjoint types. Otherwise the multi-equality may give inconsistent results\nfor `equals(e1, e2)` and `equals(e2, e1)`. This can happen if one equality\nconsiders only `e1` a valid key, and not `e2`, but an equality which is\nchecked later, allows both.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"equals","id":"equals2()","children":[{"ref":{"name":"E","refId":"dart.pkg.collection.equality/MultiEquality/E"},"kind":"param","name":"e1","id":"e1"},{"ref":{"name":"E","refId":"dart.pkg.collection.equality/MultiEquality/E"},"kind":"param","name":"e2","id":"e2"}],"line":"326"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"hash","id":"hash1()","children":[{"ref":{"name":"E","refId":"dart.pkg.collection.equality/MultiEquality/E"},"kind":"param","name":"e","id":"e"}],"line":"333"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isValidKey","id":"isValidKey1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"340"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/MultiEquality/E"}]}]},"isFinal":true,"kind":"variable","name":"_equalities","id":"_equalities","isPrivate":true,"line":"321"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/MultiEquality/E"}]}]},"kind":"param","name":"equalities","id":"equalities"}],"line":"323"},{"kind":"typeparam","name":"E","id":"E"}],"line":"320"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.pkg.collection.equality/MapEquality/K"},{"name":"V","refId":"dart.pkg.collection.equality/MapEquality/V"}]}]}],"kind":"class","name":"MapEquality","id":"MapEquality","comment":"\nEquality on maps.\n\nTwo maps are equal if they have the same number of entries, and if the\nentries of the two maps are pairwise equal on both key and value.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"equals","id":"equals2()","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.pkg.collection.equality/MapEquality/K"},{"name":"V","refId":"dart.pkg.collection.equality/MapEquality/V"}]},"kind":"param","name":"e1","id":"e1"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.pkg.collection.equality/MapEquality/K"},{"name":"V","refId":"dart.pkg.collection.equality/MapEquality/V"}]},"kind":"param","name":"e2","id":"e2"}],"line":"267"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"hash","id":"hash1()","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.pkg.collection.equality/MapEquality/K"},{"name":"V","refId":"dart.pkg.collection.equality/MapEquality/V"}]},"kind":"param","name":"map","id":"map"}],"line":"288"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isValidKey","id":"isValidKey1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"301"},{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"K","refId":"dart.pkg.collection.equality/MapEquality/K"}]},"isFinal":true,"kind":"variable","name":"_keyEquality","id":"_keyEquality","isPrivate":true,"line":"261"},{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"V","refId":"dart.pkg.collection.equality/MapEquality/V"}]},"isFinal":true,"kind":"variable","name":"_valueEquality","id":"_valueEquality","isPrivate":true,"line":"262"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"K","refId":"dart.pkg.collection.equality/MapEquality/K"}]},"defaultValue":"const DefaultEquality()","isOptional":true,"isNamed":true,"kind":"param","name":"keys","id":"keys"},{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"V","refId":"dart.pkg.collection.equality/MapEquality/V"}]},"defaultValue":"const DefaultEquality()","isOptional":true,"isNamed":true,"kind":"param","name":"values","id":"values","line":"264"}],"line":"263"},{"kind":"typeparam","name":"K","id":"K"},{"kind":"typeparam","name":"V","id":"V"}],"line":"260"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_MapEntry","id":"_MapEntry","comment":"\n Internal class used by [MapEquality].\n\n The class represents a map entry as a single object,\n using a combined hashCode and equality of the key and value.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"other","id":"other"}],"line":"245"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","line":"241"},{"ref":{"name":"MapEquality","refId":"dart.pkg.collection.equality/MapEquality"},"isFinal":true,"kind":"variable","name":"equality","id":"equality","line":"236"},{"isFinal":true,"kind":"variable","name":"key","id":"key","line":"237"},{"isFinal":true,"kind":"variable","name":"value","id":"value","line":"238"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"MapEquality","refId":"dart.pkg.collection.equality/MapEquality"},"initializedField":{"name":"equality","refId":"dart.pkg.collection.equality/_MapEntry/equality"},"kind":"param","name":"equality","id":"equality"},{"initializedField":{"name":"key","refId":"dart.pkg.collection.equality/_MapEntry/key"},"kind":"param","name":"key","id":"key"},{"initializedField":{"name":"value","refId":"dart.pkg.collection.equality/_MapEntry/value"},"kind":"param","name":"value","id":"value"}],"line":"239"}],"isPrivate":true,"line":"235"},{"superclass":{"name":"_UnorderedEquality","refId":"dart.pkg.collection.equality/_UnorderedEquality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/SetEquality/E"},{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/SetEquality/E"}]}]},"kind":"class","name":"SetEquality","id":"SetEquality","comment":"\nEquality of sets.\n\nTwo sets are considered equal if they have the same number of elements,\nand the elements of one set can be paired with the elements\nof the other set, so that each pair are equal.\n\nThis equality behaves the same as [UnorderedIterableEquality] except that\nit expects sets instead of iterables as arguments.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isValidKey","id":"isValidKey1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"226"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/SetEquality/E"}]},"defaultValue":"const DefaultEquality()","isOptional":true,"kind":"param","name":"elementEquality","id":"elementEquality","line":"223"}],"line":"222"},{"kind":"typeparam","name":"E","id":"E"}],"line":"221"},{"superclass":{"name":"_UnorderedEquality","refId":"dart.pkg.collection.equality/_UnorderedEquality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/UnorderedIterableEquality/E"},{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/UnorderedIterableEquality/E"}]}]},"kind":"class","name":"UnorderedIterableEquality","id":"UnorderedIterableEquality","comment":"\nEquality of the elements of two iterables without considering order.\n\nTwo iterables are considered equal if they have the same number of elements,\nand the elements of one set can be paired with the elements\nof the other iterable, so that each pair are equal.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isValidKey","id":"isValidKey1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"208"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/UnorderedIterableEquality/E"}]},"defaultValue":"const DefaultEquality()","isOptional":true,"kind":"param","name":"elementEquality","id":"elementEquality","line":"205"}],"line":"204"},{"kind":"typeparam","name":"E","id":"E"}],"line":"203"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"T","refId":"dart.pkg.collection.equality/_UnorderedEquality/T"}]}],"kind":"class","name":"_UnorderedEquality","id":"_UnorderedEquality","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"equals","id":"equals2()","children":[{"ref":{"name":"T","refId":"dart.pkg.collection.equality/_UnorderedEquality/T"},"kind":"param","name":"e1","id":"e1"},{"ref":{"name":"T","refId":"dart.pkg.collection.equality/_UnorderedEquality/T"},"kind":"param","name":"e2","id":"e2"}],"line":"160"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"hash","id":"hash1()","children":[{"ref":{"name":"T","refId":"dart.pkg.collection.equality/_UnorderedEquality/T"},"kind":"param","name":"e","id":"e"}],"line":"183"},{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/_UnorderedEquality/E"}]},"isFinal":true,"kind":"variable","name":"_elementEquality","id":"_elementEquality","isPrivate":true,"line":"156"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/_UnorderedEquality/E"}]},"initializedField":{"name":"_elementEquality","refId":"dart.pkg.collection.equality/_UnorderedEquality/_elementEquality"},"kind":"param","name":"_elementEquality","id":"_elementEquality","isPrivate":true}],"line":"158"},{"kind":"typeparam","name":"E","id":"E"},{"upperBound":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/_UnorderedEquality/E"}]},"kind":"typeparam","name":"T","id":"T"}],"isPrivate":true,"line":"154"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/ListEquality/E"}]}]}],"kind":"class","name":"ListEquality","id":"ListEquality","comment":"\nEquality on lists.\n\nTwo lists are equal if they have the same length and their elements\nat each index are equal.\n\nThis is effectively the same as [IterableEquality] except that it\naccesses elements by index instead of through iteration.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"equals","id":"equals2()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/ListEquality/E"}]},"kind":"param","name":"e1","id":"e1"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/ListEquality/E"}]},"kind":"param","name":"e2","id":"e2"}],"line":"123"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"hash","id":"hash1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/ListEquality/E"}]},"kind":"param","name":"e","id":"e"}],"line":"134"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isValidKey","id":"isValidKey1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"151"},{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/ListEquality/E"}]},"isFinal":true,"kind":"variable","name":"_elementEquality","id":"_elementEquality","isPrivate":true,"line":"119"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/ListEquality/E"}]},"defaultValue":"const DefaultEquality()","isOptional":true,"kind":"param","name":"elementEquality","id":"elementEquality"}],"line":"120"},{"kind":"typeparam","name":"E","id":"E"}],"line":"118"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/IterableEquality/E"}]}]}],"kind":"class","name":"IterableEquality","id":"IterableEquality","comment":"\nEquality on iterables.\n\nTwo iterables are equal if they have the same elements in the same order.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"equals","id":"equals2()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/IterableEquality/E"}]},"kind":"param","name":"elements1","id":"elements1"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/IterableEquality/E"}]},"kind":"param","name":"elements2","id":"elements2"}],"line":"78"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"hash","id":"hash1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/IterableEquality/E"}]},"kind":"param","name":"elements","id":"elements"}],"line":"91"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isValidKey","id":"isValidKey1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"106"},{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/IterableEquality/E"}]},"isFinal":true,"kind":"variable","name":"_elementEquality","id":"_elementEquality","isPrivate":true,"line":"73"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/IterableEquality/E"}]},"defaultValue":"const DefaultEquality()","isOptional":true,"kind":"param","name":"elementEquality","id":"elementEquality"}],"line":"74"},{"kind":"typeparam","name":"E","id":"E"}],"line":"72"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Equality","refId":"dart.pkg.collection.equality/Equality"}],"kind":"class","name":"IdentityEquality","id":"IdentityEquality","comment":"\nEquality of objects that compares only the identity of the objects.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"equals","id":"equals2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"e1","id":"e1"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"e2","id":"e2"}],"line":"62"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"hash","id":"hash1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"e","id":"e"}],"line":"63"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isValidKey","id":"isValidKey1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"64"},{"kind":"constructor","name":"","id":"0()","line":"61"}],"line":"60"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Equality","refId":"dart.pkg.collection.equality/Equality"}],"kind":"class","name":"DefaultEquality","id":"DefaultEquality","comment":"\nEquality of objects that compares only the natural equality of the objects.\n\nThis equality uses the objects' own [Object.==] and [Object.hashCode] for\nthe equality.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"equals","id":"equals2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"e1","id":"e1"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"e2","id":"e2"}],"line":"52"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"hash","id":"hash1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"e","id":"e"}],"line":"53"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isValidKey","id":"isValidKey1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"54"},{"kind":"constructor","name":"","id":"0()","line":"51"}],"line":"50"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Equality","id":"Equality","comment":"\nA generic equality relation on objects.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"equals","id":"equals2()","comment":"\nCompare two elements for being equal.\n\nThis should be a proper equality relation.\n","children":[{"ref":{"name":"E","refId":"dart.pkg.collection.equality/Equality/E"},"kind":"param","name":"e1","id":"e1"},{"ref":{"name":"E","refId":"dart.pkg.collection.equality/Equality/E"},"kind":"param","name":"e2","id":"e2"}],"line":"25"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"hash","id":"hash1()","comment":"\nGet a hashcode of an element.\n\nThe hashcode should be compatible with [equals], so that if\n`equals(a, b)` then `hash(a) == hash(b)`.\n","children":[{"ref":{"name":"E","refId":"dart.pkg.collection.equality/Equality/E"},"kind":"param","name":"e","id":"e"}],"line":"33"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isValidKey","id":"isValidKey1()","comment":"\nTest whether an object is a valid argument to [equals] and [hash].\n\nSome implementations may be restricted to only work on specific types\nof objects.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"41"},{"returnType":{"name":"Equality","refId":"dart.pkg.collection.equality/Equality","arguments":[{"name":"E","refId":"dart.pkg.collection.equality/Equality/E"}]},"kind":"constructor","name":"","id":"0()","line":"18"},{"kind":"typeparam","name":"E","id":"E"}],"line":"17"}],"uri":"package:collection/equality.dart","line":"8"}