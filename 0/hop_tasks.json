{"dependencies":[{"id":"dart.core","uri":"file:///usr/local/Cellar/dart-editor/25990/dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"file:///usr/local/Cellar/dart-editor/25990/dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"48","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"65","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"},{"id":"unittest","comment":"\nA library for writing dart unit tests.\n\n## Installing ##\n\nUse [pub][] to install this package. Add the following to your `pubspec.yaml`\nfile.\n\n    dependencies:\n      unittest: any\n\nThen run `pub install`.\n\nFor more information, see the\n[unittest package on pub.dartlang.org][pkg].\n\nSee the [Getting Started](http://pub.dartlang.org/doc)\nguide for more details.\n\n##Concepts##\n\n * __Tests__: Tests are specified via the top-level function [test], they can be\n   organized together using [group].\n * __Checks__: Test expectations can be specified via [expect]\n * __Matchers__: [expect] assertions are written declaratively using the\n   [Matcher] class.\n * __Configuration__: The framework can be adapted by setting\n   [unittestConfiguration] with a [Configuration]. See the other libraries\n   in the `unittest` package for alternative implementations of\n   [Configuration] including `compact_vm_config.dart`, `html_config.dart` and\n   `html_enhanced_config.dart`.\n\n##Examples##\n\nA trivial test:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      test('this is a test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n    }\n\nMultiple tests:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      test('this is a test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n      test('this is another test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n    }\n\nMultiple tests, grouped by category:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      group('group A', () {\n        test('test A.1', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n        test('test A.2', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n      });\n      group('group B', () {\n        test('this B.1', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n      });\n    }\n\nAsynchronous tests: if callbacks expect between 0 and 2 positional arguments,\ndepending on the suffix of expectAsyncX(). expectAsyncX() will wrap a\nfunction into a new callback and will not consider the test complete until\nthat callback is run. A count argument can be provided to specify the number\nof times the callback should be called (the default is 1).\n\n    import 'package:unittest/unittest.dart';\n    import 'dart:isolate';\n    main() {\n      test('callback is executed once', () {\n        // wrap the callback of an asynchronous call with [expectAsync0] if\n        // the callback takes 0 arguments...\n        var timer = Timer.run(expectAsync0(() {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        }));\n      });\n\n      test('callback is executed twice', () {\n        var callback = expectAsync0(() {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        }, count: 2); // <-- we can indicate multiplicity to [expectAsync0]\n        Timer.run(callback);\n        Timer.run(callback);\n      });\n    }\n\nexpectAsyncX() will wrap the callback code in a try/catch handler to handle\nexceptions (treated as test failures). There may be times when the number of\ntimes a callback should be called is non-deterministic. In this case a dummy\ncallback can be created with expectAsync0((){}) and this can be called from\nthe real callback when it is finally complete. In this case the body of the\ncallback should be protected within a call to guardAsync(); this will ensure\nthat exceptions are properly handled.\n\nA variation on this is expectAsyncUntilX(), which takes a callback as the\nfirst parameter and a predicate function as the second parameter; after each\ntime * the callback is called, the predicate function will be called; if it\nreturns false the test will still be considered incomplete.\n\nTest functions can return [Future]s, which provide another way of doing\nasynchronous tests. The test framework will handle exceptions thrown by\nthe Future, and will advance to the next test when the Future is complete.\nIt is still important to use expectAsync/guardAsync with any parts of the\ntest that may be invoked from a top level context (for example, with\nTimer.run()], as the Future exception handler may not capture exceptions\nin such code.\n\nNote: due to some language limitations we have to use different functions\ndepending on the number of positional arguments of the callback. In the\nfuture, we plan to expose a single `expectAsync` function that can be used\nregardless of the number of positional arguments. This requires new langauge\nfeatures or fixes to the current spec (e.g. see\n[Issue 2706](http://dartbug.com/2706)).\n\n[pub]: http://pub.dartlang.org\n[pkg]: http://pub.dartlang.org/packages/unittest\n","uri":"package:unittest/unittest.dart","name":"package:unittest/unittest.dart","children":[{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Configuration","comment":"\nHooks to configure the unittest library for different platforms. This class\nimplements the API in a platform-independent way. Tests that want to take\nadvantage of the platform can create a subclass and override methods from\nthis class.\n","uri":"package:unittest/src/config.dart","name":"Configuration","children":[{"returnType":{"refId":"void","name":"void"},"id":"onInit0()","comment":"\nCalled as soon as the unittest framework becomes initialized. This is done\neven before tests are added to the test framework. It might be used to\ndetermine/debug errors that occur before the test harness starts executing.\nIt is also used to tell the vm or browser that tests are going to be run\nasynchronously and that the process should wait until they are done.\n","name":"onInit","line":"74","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onStart0()","comment":"Called as soon as the unittest framework starts running. ","name":"onStart","line":"80","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onTestStart1()","comment":"\nCalled when each test starts. Useful to show intermediate progress on\na test suite. Derived classes should call this first before their own\noverride code.\n","name":"onTestStart","children":[{"ref":{"refId":"unittest/TestCase","name":"TestCase"},"id":"testCase","name":"testCase","kind":"param"}],"line":"87","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onTestResult1()","comment":"\nCalled when each test is first completed. Useful to show intermediate\nprogress on a test suite. Derived classes should call this first \nbefore their own override code.\n","name":"onTestResult","children":[{"ref":{"refId":"unittest/TestCase","name":"TestCase"},"id":"testCase","name":"testCase","kind":"param"}],"line":"97","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onTestResultChanged1()","comment":"\nCalled when an already completed test changes state; for example a test\nthat was marked as passing may later be marked as being in error because\nit still had callbacks being invoked.\n","name":"onTestResultChanged","children":[{"ref":{"refId":"unittest/TestCase","name":"TestCase"},"id":"testCase","name":"testCase","kind":"param"}],"line":"134","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onLogMessage2()","comment":"\nHandles the logging of messages by a test case. The default in\nthis base configuration is to call print();\n","name":"onLogMessage","children":[{"ref":{"refId":"unittest/TestCase","name":"TestCase"},"id":"testCase","name":"testCase","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"}],"line":"142","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onExpectFailure1()","comment":"\nHandles failures from expect(). The default in\nthis base configuration is to throw an exception;\n","name":"onExpectFailure","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"reason","name":"reason","kind":"param"}],"line":"150","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"formatResult1()","comment":"\nFormat a test result.\n","name":"formatResult","children":[{"ref":{"refId":"unittest/TestCase","name":"TestCase"},"id":"testCase","name":"testCase","kind":"param"}],"line":"166","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onSummary5()","comment":"\nCalled with the result of all test cases. The default implementation prints\nthe result summary using the built-in [print] command. Browser tests\ncommonly override this to reformat the output.\n\nWhen [uncaughtError] is not null, it contains an error that occured outside\nof tests (e.g. setting up the test).\n","name":"onSummary","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"passed","name":"passed","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"failed","name":"failed","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"errors","name":"errors","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"unittest/TestCase","name":"TestCase"}],"name":"List"},"id":"results","name":"results","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"uncaughtError","name":"uncaughtError","line":"194","kind":"param"}],"line":"193","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onDone1()","comment":"\nCalled when the unittest framework is done running. [success] indicates\nwhether all tests passed successfully.\n","name":"onDone","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"success","name":"success","kind":"param"}],"line":"220","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"handleExternalError3()","comment":"Handle errors that happen outside the tests. ","name":"handleExternalError","children":[{"id":"e","name":"e","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"},{"isOptional":true,"id":"stack","name":"stack","kind":"param"}],"line":"235","kind":"method"},{"id":"_postMessage1()","name":"_postMessage","isPrivate":true,"children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"}],"line":"238","kind":"method"},{"ref":{"refId":"dart.isolate/ReceivePort","name":"ReceivePort"},"id":"_receivePort","name":"_receivePort","isPrivate":true,"line":"29","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"id":"name","comment":"\nSubclasses can override this with something useful for diagnostics.\nParticularly useful in cases where we have parent/child configurations\nsuch as layout tests.\n","name":"name","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"id":"autoStart","comment":"\nIf true, then tests are started automatically (otherwise [runTests]\nmust be called explicitly after the tests are set up.\n","name":"autoStart","line":"42","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"throwOnTestFailures","comment":"\nIf true (the default), throw an exception at the end if any tests failed.\n","name":"throwOnTestFailures","line":"47","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"stopTestOnExpectFailure","comment":"\nIf true (the default), then tests will stop after the first failed\n[expect]. If false, failed [expect]s will not cause the test\nto stop (other exceptions will still terminate the test).\n","name":"stopTestOnExpectFailure","line":"54","kind":"variable"},{"isFinal":true,"id":"_testLogBuffer","name":"_testLogBuffer","isPrivate":true,"line":"58","kind":"variable"},{"id":"0()","comment":"\nThe constructor sets up a failure handler for [expect] that redirects\n[expect] failures to [onExpectFailure].\n","name":"","line":"64","kind":"constructor"}],"line":"26","kind":"class"}],"line":"144","kind":"library"}],"id":"hop_tasks","uri":"file:///Users/kevin/source/github/hop.dart/lib/hop_tasks.dart","children":[{"returnType":{"refId":"void","name":"void"},"id":"_unittestParserConfig1()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/unit_test.dart","name":"_unittestParserConfig","isPrivate":true,"children":[{"ref":{"refId":"args/ArgParser","name":"ArgParser"},"id":"parser","name":"parser","kind":"param"}],"line":"59","kind":"method"},{"returnType":{"refId":"hop/Task","name":"Task"},"id":"createUnitTestTask1()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/unit_test.dart","name":"createUnitTestTask","children":[{"ref":{"refId":"bot/Action1","name":"Action1"},"id":"unitTestAction","name":"unitTestAction","kind":"param"}],"line":"10","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"Future"},"id":"pipeProcess3()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/process.dart","name":"pipeProcess","children":[{"ref":{"refId":"dart.io/Process","name":"Process"},"id":"process","name":"process","kind":"param"},{"isNamed":true,"ref":{"refId":"bot/Action1","name":"Action1"},"isOptional":true,"id":"stdOutWriter","name":"stdOutWriter","line":"33","kind":"param"},{"isNamed":true,"ref":{"refId":"bot/Action1","name":"Action1"},"isOptional":true,"id":"stdErrWriter","name":"stdErrWriter","line":"33","kind":"param"}],"line":"32","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"id":"startProcess3()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/process.dart","name":"startProcess","children":[{"ref":{"refId":"hop/TaskLogger","name":"TaskLogger"},"id":"ctx","name":"ctx","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"command","name":"command","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isOptional":true,"defaultValue":"null","id":"args","name":"args","line":"11","kind":"param"}],"line":"10","kind":"method"},{"returnType":{"refId":"hop/Task","name":"Task"},"id":"createProcessTask3()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/process.dart","name":"createProcessTask","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"command","name":"command","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isOptional":true,"defaultValue":"null","id":"args","name":"args","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"description","name":"description","kind":"param"}],"line":"3","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"id":"branchForDir5()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/git_tasks.dart","name":"branchForDir","children":[{"ref":{"refId":"hop/TaskContext","name":"TaskContext"},"id":"ctx","name":"ctx","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"sourceBranch","name":"sourceBranch","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"sourceDir","name":"sourceDir","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"targetBranch","name":"targetBranch","line":"18","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"workingDir","name":"workingDir","line":"18","kind":"param"}],"line":"17","kind":"method"},{"returnType":{"refId":"hop/Task","name":"Task"},"id":"getBranchForDirTask4()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/git_tasks.dart","name":"getBranchForDirTask","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"sourceBranch","name":"sourceBranch","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"sourceDir","name":"sourceDir","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"targetBranch","name":"targetBranch","line":"4","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"workingDir","name":"workingDir","line":"4","kind":"param"}],"line":"3","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"id":"_doDocsPopulate7()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartdoc.dart","name":"_doDocsPopulate","isPrivate":true,"children":[{"ref":{"refId":"hop/TaskContext","name":"TaskContext"},"id":"ctx","name":"ctx","kind":"param"},{"ref":{"refId":"bot_io/TempDir","name":"TempDir"},"id":"dir","name":"dir","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Iterable"},"id":"libs","name":"libs","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"packageDir","name":"packageDir","line":"115","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"excludeList","name":"excludeList","line":"115","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"linkApi","name":"linkApi","line":"116","kind":"param"},{"ref":{"refId":"bot/Func2","name":"Func2"},"id":"postBuild","name":"postBuild","line":"116","kind":"param"}],"line":"114","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Future"},"id":"_getCommitMessageFuture2()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartdoc.dart","name":"_getCommitMessageFuture","isPrivate":true,"children":[{"ref":{"refId":"bot_git/GitDir","name":"GitDir"},"id":"gitDir","name":"gitDir","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isClean","name":"isClean","kind":"param"}],"line":"98","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_dartDocParserConfig2()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartdoc.dart","name":"_dartDocParserConfig","isPrivate":true,"children":[{"ref":{"refId":"args/ArgParser","name":"ArgParser"},"id":"parser","name":"parser","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"targetBranch","name":"targetBranch","kind":"param"}],"line":"93","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"id":"_compileDocs7()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartdoc.dart","name":"_compileDocs","isPrivate":true,"children":[{"ref":{"refId":"hop/TaskContext","name":"TaskContext"},"id":"ctx","name":"ctx","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"targetBranch","name":"targetBranch","kind":"param"},{"id":"delayedLibraryList","name":"delayedLibraryList","line":"40","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"packageDir","name":"packageDir","line":"40","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Iterable"},"id":"excludeLibs","name":"excludeLibs","line":"41","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"linkApi","name":"linkApi","line":"41","kind":"param"},{"ref":{"refId":"bot/Func2","name":"Func2"},"id":"postBuild","name":"postBuild","line":"41","kind":"param"}],"line":"39","kind":"method"},{"returnType":{"refId":"hop/Task","name":"Task"},"id":"createDartDocTask6()","comment":"\n[targetBranch] the Git branch that will contain the generated docs. If the\nbranch doesn't exist, it will be created. Default: `gh-pages`\n\n[packageDir] the package directory for the current project. Default: `packages/`\n\n[delayedLibraryList] a [List<String>] mapping to paths to libraries or some\ncombinations of [Future] or [Function] values that return a [List<String>].\n\n[postBuild] A [Function] to call before content is committed. It has the\nsignature `Future postBuild(TaskLogger logger, String tempDocPath)`. Use this\nif you want to modify the doc output.\n","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartdoc.dart","name":"createDartDocTask","children":[{"id":"delayedLibraryList","name":"delayedLibraryList","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"'gh-pages'","id":"targetBranch","name":"targetBranch","line":"20","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"'packages/'","id":"packageDir","name":"packageDir","line":"21","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Iterable"},"isOptional":true,"id":"excludeLibs","name":"excludeLibs","line":"22","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","id":"linkApi","name":"linkApi","line":"23","kind":"param"},{"isNamed":true,"ref":{"refId":"bot/Func2","name":"Func2"},"isOptional":true,"id":"postBuild","name":"postBuild","line":"24","kind":"param"}],"line":"19","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"id":"_dart2js10()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dart2js.dart","name":"_dart2js","isPrivate":true,"children":[{"ref":{"refId":"hop/TaskContext","name":"TaskContext"},"id":"ctx","name":"ctx","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"file","name":"file","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"output","name":"output","line":"93","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"packageRoot","name":"packageRoot","line":"93","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"minify","name":"minify","line":"93","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"allowUnsafeEval","name":"allowUnsafeEval","line":"93","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"liveTypeAnalysis","name":"liveTypeAnalysis","line":"94","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"throwOnError","name":"throwOnError","line":"94","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"verbose","name":"verbose","line":"94","kind":"param"},{"ref":{"refId":"hop_tasks/CompilerTargetType","name":"CompilerTargetType"},"id":"outputType","name":"outputType","line":"95","kind":"param"}],"line":"92","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"_dart2DartOutputMapper1()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dart2js.dart","name":"_dart2DartOutputMapper","isPrivate":true,"children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"input","name":"input","kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"_dart2jsOutputMapper1()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dart2js.dart","name":"_dart2jsOutputMapper","isPrivate":true,"children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"input","name":"input","kind":"param"}],"line":"82","kind":"method"},{"returnType":{"refId":"hop/Task","name":"Task"},"id":"createDartCompilerTask10()","comment":"\n[delayedRootList] a [List<String>] mapping to paths to libraries or some\ncombinations of [Future] or [Function] values that return a [List<String>].\n\n[outputType] must be one of type [CompilerTargetType].\n","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dart2js.dart","name":"createDartCompilerTask","children":[{"id":"delayedRootList","name":"delayedRootList","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"singleOutput","name":"singleOutput","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"packageRoot","name":"packageRoot","line":"24","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","id":"minify","name":"minify","line":"24","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"allowUnsafeEval","name":"allowUnsafeEval","line":"24","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"liveTypeAnalysis","name":"liveTypeAnalysis","line":"25","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","id":"throwOnError","name":"throwOnError","line":"25","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"verbose","name":"verbose","line":"25","kind":"param"},{"isNamed":true,"ref":{"refId":"hop_tasks/CompilerTargetType","name":"CompilerTargetType"},"isOptional":true,"defaultValue":"CompilerTargetType.JS","id":"outputType","name":"outputType","line":"26","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"outputMapper","name":"outputMapper","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/25990/dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"source","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dart2js.dart","name":"source","line":"27","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"27","kind":"param"}],"line":"23","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Future"},"id":"_getPackagesDir1()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartanalyzer.dart","name":"_getPackagesDir","isPrivate":true,"children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"filePath","name":"filePath","kind":"param"}],"line":"122","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"Future"},"id":"_dartAnalyzer4()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartanalyzer.dart","name":"_dartAnalyzer","isPrivate":true,"children":[{"ref":{"refId":"hop/TaskLogger","name":"TaskLogger"},"id":"logger","name":"logger","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"filePath","name":"filePath","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"verbose","name":"verbose","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"formatMachine","name":"formatMachine","line":"91","kind":"param"}],"line":"90","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"id":"_processDartAnalyzerFile4()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartanalyzer.dart","name":"_processDartAnalyzerFile","isPrivate":true,"children":[{"ref":{"refId":"hop/TaskContext","name":"TaskContext"},"id":"context","name":"context","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"analyzerFilePaths","name":"analyzerFilePaths","line":"49","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"verbose","name":"verbose","line":"49","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"formatMachine","name":"formatMachine","line":"49","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_parserConfig1()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartanalyzer.dart","name":"_parserConfig","isPrivate":true,"children":[{"ref":{"refId":"args/ArgParser","name":"ArgParser"},"id":"parser","name":"parser","kind":"param"}],"line":"40","kind":"method"},{"returnType":{"refId":"hop/Task","name":"Task"},"id":"createAnalyzerTask1()","comment":"\n[delayedFileList] a [List<String>] mapping to paths to dart files or some\ncombinations of [Future] or [Function] values that return a [List<String>].\n","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartanalyzer.dart","name":"createAnalyzerTask","children":[{"id":"delayedFileList","name":"delayedFileList","kind":"param"}],"line":"10","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"hop_tasks/_BenchRunResult","name":"_BenchRunResult"}],"name":"Future"},"id":"_runOnce3()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/bench_task.dart","name":"_runOnce","isPrivate":true,"children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"runNumber","name":"runNumber","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"processName","name":"processName","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"args","name":"args","kind":"param"}],"line":"65","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"hop_tasks/_BenchRunResult","name":"_BenchRunResult"}],"name":"List"}],"name":"Future"},"id":"_runMany4()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/bench_task.dart","name":"_runMany","isPrivate":true,"children":[{"ref":{"refId":"hop/TaskLogger","name":"TaskLogger"},"id":"logger","name":"logger","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"count","name":"count","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"processName","name":"processName","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"args","name":"args","kind":"param"}],"line":"44","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_benchParserConfig1()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/bench_task.dart","name":"_benchParserConfig","isPrivate":true,"children":[{"ref":{"refId":"args/ArgParser","name":"ArgParser"},"id":"parser","name":"parser","kind":"param"}],"line":"39","kind":"method"},{"returnType":{"refId":"hop/Task","name":"Task"},"id":"createBenchTask0()","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/bench_task.dart","name":"createBenchTask","line":"12","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"_getPlatformBin1()","name":"_getPlatformBin","isPrivate":true,"children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"binName","name":"binName","kind":"param"}],"line":"37","kind":"method"},{"returnType":{"refId":"args/ArgResults","name":"ArgResults"},"id":"_helpfulParseArgs3()","name":"_helpfulParseArgs","isPrivate":true,"children":[{"ref":{"refId":"hop/TaskContext","name":"TaskContext"},"id":"ctx","name":"ctx","kind":"param"},{"ref":{"refId":"args/ArgParser","name":"ArgParser"},"id":"parser","name":"parser","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"args","name":"args","kind":"param"}],"line":"26","kind":"method"},{"id":"_summaryError","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/unit_test.dart","name":"_summaryError","isPrivate":true,"line":"8","kind":"variable"},{"id":"_summaryPass","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/unit_test.dart","name":"_summaryPass","isPrivate":true,"line":"7","kind":"variable"},{"id":"_summaryFail","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/unit_test.dart","name":"_summaryFail","isPrivate":true,"line":"6","kind":"variable"},{"id":"_summaryAll","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/unit_test.dart","name":"_summaryAll","isPrivate":true,"line":"5","kind":"variable"},{"id":"_summaryFlag","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/unit_test.dart","name":"_summaryFlag","isPrivate":true,"line":"4","kind":"variable"},{"id":"_listFlag","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/unit_test.dart","name":"_listFlag","isPrivate":true,"line":"3","kind":"variable"},{"id":"_targetBranchArg","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartdoc.dart","name":"_targetBranchArg","isPrivate":true,"line":"4","kind":"variable"},{"id":"_allowDirtyArg","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartdoc.dart","name":"_allowDirtyArg","isPrivate":true,"line":"3","kind":"variable"},{"id":"_formatMachineArgName","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartanalyzer.dart","name":"_formatMachineArgName","isPrivate":true,"line":"4","kind":"variable"},{"id":"_verboseArgName","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dartanalyzer.dart","name":"_verboseArgName","isPrivate":true,"line":"3","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"_runCountArgName","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/bench_task.dart","name":"_runCountArgName","isPrivate":true,"line":"10","kind":"variable"},{"id":"_defaultRunCount","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/bench_task.dart","name":"_defaultRunCount","isPrivate":true,"line":"3","kind":"variable"},{"interfaces":[{"refId":"unittest/Configuration","name":"Configuration"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"_HopTestConfiguration","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/unit_test.dart","name":"_HopTestConfiguration","isPrivate":true,"children":[{"returnType":{"refId":"void","name":"void"},"id":"onInit0()","name":"onInit","line":"85","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onStart0()","name":"onStart","line":"90","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onTestStart1()","name":"onTestStart","children":[{"ref":{"refId":"unittest/TestCase","name":"TestCase"},"id":"testCase","name":"testCase","line":"96","kind":"param"}],"line":"95","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onLogMessage2()","name":"onLogMessage","children":[{"ref":{"refId":"unittest/TestCase","name":"TestCase"},"id":"testCase","name":"testCase","line":"101","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","line":"101","kind":"param"}],"line":"100","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onTestResult1()","name":"onTestResult","children":[{"ref":{"refId":"unittest/TestCase","name":"TestCase"},"id":"testCase","name":"testCase","line":"107","kind":"param"}],"line":"106","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onTestResultChanged1()","name":"onTestResultChanged","children":[{"ref":{"refId":"unittest/TestCase","name":"TestCase"},"id":"testCase","name":"testCase","line":"125","kind":"param"}],"line":"124","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onSummary5()","name":"onSummary","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"passed","name":"passed","line":"134","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"failed","name":"failed","line":"134","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"errors","name":"errors","line":"134","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"unittest/TestCase","name":"TestCase"}],"name":"List"},"id":"results","name":"results","line":"134","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"uncaughtError","name":"uncaughtError","line":"135","kind":"param"}],"line":"133","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"onDone1()","name":"onDone","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"success","name":"success","line":"169","kind":"param"}],"line":"168","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"handleExternalError3()","name":"handleExternalError","children":[{"id":"error","name":"error","line":"175","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","line":"175","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"''","id":"stack","name":"stack","line":"175","kind":"param"}],"line":"173","kind":"method"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"id":"future","name":"future","line":"77","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"name","name":"name","line":"79","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"autoStart","name":"autoStart","line":"82","kind":"property"},{"ref":{"refId":"dart.async/Completer","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Completer"},"isFinal":true,"id":"_completer","name":"_completer","isPrivate":true,"line":"69","kind":"variable"},{"ref":{"refId":"hop/TaskContext","name":"TaskContext"},"isFinal":true,"id":"_context","name":"_context","isPrivate":true,"line":"70","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"id":"failSummary","name":"failSummary","line":"71","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"id":"passSummary","name":"passSummary","line":"72","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"id":"errorSummary","name":"errorSummary","line":"73","kind":"variable"},{"id":"4()","name":"","children":[{"initializedField":{"refId":"hop_tasks/_HopTestConfiguration/_context","name":"_context"},"ref":{"refId":"hop/TaskContext","name":"TaskContext"},"id":"_context","name":"_context","isPrivate":true,"kind":"param"},{"initializedField":{"refId":"hop_tasks/_HopTestConfiguration/failSummary","name":"failSummary"},"ref":{"refId":"dart.core/bool","name":"bool"},"id":"failSummary","name":"failSummary","kind":"param"},{"initializedField":{"refId":"hop_tasks/_HopTestConfiguration/passSummary","name":"passSummary"},"ref":{"refId":"dart.core/bool","name":"bool"},"id":"passSummary","name":"passSummary","kind":"param"},{"initializedField":{"refId":"hop_tasks/_HopTestConfiguration/errorSummary","name":"errorSummary"},"ref":{"refId":"dart.core/bool","name":"bool"},"id":"errorSummary","name":"errorSummary","kind":"param"}],"line":"75","kind":"constructor"}],"line":"68","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"CompilerTargetType","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/dart2js.dart","name":"CompilerTargetType","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","name":"toString","line":"13","kind":"method"},{"isStatic":true,"id":"JS","name":"JS","line":"5","kind":"variable"},{"isStatic":true,"id":"DART","name":"DART","line":"6","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"id":"fileExt","name":"fileExt","line":"8","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"id":"friendlyName","name":"friendlyName","line":"9","kind":"variable"},{"id":"_2()","name":"_","isPrivate":true,"children":[{"initializedField":{"refId":"hop_tasks/CompilerTargetType/fileExt","name":"fileExt"},"ref":{"refId":"dart.core/String","name":"String"},"id":"fileExt","name":"fileExt","kind":"param"},{"initializedField":{"refId":"hop_tasks/CompilerTargetType/friendlyName","name":"friendlyName"},"ref":{"refId":"dart.core/String","name":"String"},"id":"friendlyName","name":"friendlyName","kind":"param"}],"line":"11","kind":"constructor"}],"line":"3","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"_Stats","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/bench_task.dart","name":"_Stats","isPrivate":true,"children":[{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","name":"toString","line":"162","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"id":"count","name":"count","line":"100","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"isFinal":true,"id":"mean","name":"mean","line":"101","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"isFinal":true,"id":"median","name":"median","line":"102","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"isFinal":true,"id":"max","name":"max","line":"103","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"isFinal":true,"id":"min","name":"min","line":"104","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"isFinal":true,"id":"standardDeviation","name":"standardDeviation","line":"105","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"isFinal":true,"id":"standardError","name":"standardError","line":"106","kind":"variable"},{"id":"raw6()","name":"raw","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"count","name":"count","kind":"param"},{"initializedField":{"refId":"hop_tasks/_Stats/mean","name":"mean"},"ref":{"refId":"dart.core/num","name":"num"},"id":"mean","name":"mean","kind":"param"},{"initializedField":{"refId":"hop_tasks/_Stats/median","name":"median"},"ref":{"refId":"dart.core/num","name":"num"},"id":"median","name":"median","kind":"param"},{"initializedField":{"refId":"hop_tasks/_Stats/max","name":"max"},"ref":{"refId":"dart.core/num","name":"num"},"id":"max","name":"max","kind":"param"},{"initializedField":{"refId":"hop_tasks/_Stats/min","name":"min"},"ref":{"refId":"dart.core/num","name":"num"},"id":"min","name":"min","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"id":"standardDeviation","name":"standardDeviation","kind":"param"}],"line":"108","kind":"constructor"},{"returnType":{"refId":"hop_tasks/_Stats","name":"_Stats"},"id":"1()","name":"","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/num","name":"num"}],"name":"Iterable"},"id":"source","name":"source","kind":"param"}],"line":"113","kind":"constructor"}],"line":"99","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"_BenchRunResult","uri":"file:///Users/kevin/source/github/hop.dart/lib/src/hop_tasks/bench_task.dart","name":"_BenchRunResult","isPrivate":true,"children":[{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","name":"toString","line":"92","kind":"method"},{"ref":{"refId":"dart.core/Duration","name":"Duration"},"id":"startupDelta","name":"startupDelta","line":"88","kind":"property"},{"ref":{"refId":"dart.core/Duration","name":"Duration"},"id":"executionDuration","name":"executionDuration","line":"90","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"id":"runNumber","name":"runNumber","line":"80","kind":"variable"},{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"isFinal":true,"id":"preStart","name":"preStart","line":"81","kind":"variable"},{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"isFinal":true,"id":"postStart","name":"postStart","line":"82","kind":"variable"},{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"isFinal":true,"id":"postEnd","name":"postEnd","line":"83","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"id":"completed","name":"completed","line":"84","kind":"variable"},{"id":"5()","name":"","children":[{"initializedField":{"refId":"hop_tasks/_BenchRunResult/runNumber","name":"runNumber"},"ref":{"refId":"dart.core/int","name":"int"},"id":"runNumber","name":"runNumber","kind":"param"},{"initializedField":{"refId":"hop_tasks/_BenchRunResult/completed","name":"completed"},"ref":{"refId":"dart.core/bool","name":"bool"},"id":"completed","name":"completed","kind":"param"},{"initializedField":{"refId":"hop_tasks/_BenchRunResult/preStart","name":"preStart"},"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"preStart","name":"preStart","kind":"param"},{"initializedField":{"refId":"hop_tasks/_BenchRunResult/postStart","name":"postStart"},"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"postStart","name":"postStart","kind":"param"},{"initializedField":{"refId":"hop_tasks/_BenchRunResult/postEnd","name":"postEnd"},"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"postEnd","name":"postEnd","kind":"param"}],"line":"86","kind":"constructor"}],"line":"79","kind":"class"}],"line":"1","kind":"library"}