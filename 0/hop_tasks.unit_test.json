{"dependencies":[{"kind":"library","name":"package:unittest/unittest.dart","id":"unittest","comment":"\nSupport for writing Dart unit tests.\n\nFor information on installing and importing this library, see the\n[unittest package on pub.dartlang.org]\n(http://pub.dartlang.org/packages/unittest).\n\n**See also:**\n[Unit Testing with Dart]\n(http://www.dartlang.org/articles/dart-unit-tests/)\n\n##Concepts\n\n * __Tests__: Tests are specified via the top-level function [test], they can be\n   organized together using [group].\n\n * __Checks__: Test expectations can be specified via [expect]\n\n * __Matchers__: [expect] assertions are written declaratively using the\n   [Matcher] class.\n\n * __Configuration__: The framework can be adapted by setting\n   [unittestConfiguration] with a [Configuration]. See the other libraries\n   in the `unittest` package for alternative implementations of\n   [Configuration] including `compact_vm_config.dart`, `html_config.dart` and\n   `html_enhanced_config.dart`.\n\n##Examples\n\nA trivial test:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      test('this is a test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n    }\n\nMultiple tests:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      test('this is a test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n      test('this is another test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n    }\n\nMultiple tests, grouped by category:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      group('group A', () {\n        test('test A.1', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n        test('test A.2', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n      });\n      group('group B', () {\n        test('this B.1', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n      });\n    }\n\nAsynchronous tests: if callbacks expect between 0 and 2 positional arguments,\ndepending on the suffix of expectAsyncX(). expectAsyncX() will wrap a\nfunction into a new callback and will not consider the test complete until\nthat callback is run. A count argument can be provided to specify the number\nof times the callback should be called (the default is 1).\n\n    import 'package:unittest/unittest.dart';\n    import 'dart:isolate';\n    main() {\n      test('callback is executed once', () {\n        // wrap the callback of an asynchronous call with [expectAsync0] if\n        // the callback takes 0 arguments...\n        var timer = Timer.run(expectAsync0(() {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        }));\n      });\n\n      test('callback is executed twice', () {\n        var callback = expectAsync0(() {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        }, count: 2); // <-- we can indicate multiplicity to [expectAsync0]\n        Timer.run(callback);\n        Timer.run(callback);\n      });\n    }\n\nexpectAsyncX() will wrap the callback code in a try/catch handler to handle\nexceptions (treated as test failures). There may be times when the number of\ntimes a callback should be called is non-deterministic. In this case a dummy\ncallback can be created with expectAsync0((){}) and this can be called from\nthe real callback when it is finally complete. In this case the body of the\ncallback should be protected within a call to guardAsync(); this will ensure\nthat exceptions are properly handled.\n\nA variation on this is expectAsyncUntilX(), which takes a callback as the\nfirst parameter and a predicate function as the second parameter; after each\ntime * the callback is called, the predicate function will be called; if it\nreturns false the test will still be considered incomplete.\n\nTest functions can return [Future]s, which provide another way of doing\nasynchronous tests. The test framework will handle exceptions thrown by\nthe Future, and will advance to the next test when the Future is complete.\nIt is still important to use expectAsync/guardAsync with any parts of the\ntest that may be invoked from a top level context (for example, with\nTimer.run()], as the Future exception handler may not capture exceptions\nin such code.\n\nNote: Due to some language limitations we have to use different functions\ndepending on the number of positional arguments of the callback. In the\nfuture, we plan to expose a single `expectAsync` function that can be used\nregardless of the number of positional arguments. This requires new langauge\nfeatures or fixes to the current spec (e.g. see\n[Issue 2706](http://dartbug.com/2706)).\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Configuration","id":"Configuration","comment":"\nDescribes the interface used by the unit test system for communicating the\nresults of a test run.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onInit","id":"onInit0()","comment":"\nCalled as soon as the unittest framework becomes initialized. This is done\neven before tests are added to the test framework. It might be used to\ndetermine/debug errors that occur before the test harness starts executing.\nIt is also used to tell the vm or browser that tests are going to be run\nasynchronously and that the process should wait until they are done.\n","line":"42"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onStart","id":"onStart0()","comment":"Called as soon as the unittest framework starts running. ","line":"45"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onTestStart","id":"onTestStart1()","comment":"\nCalled when each test starts. Useful to show intermediate progress on\na test suite.\n","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"}],"line":"51"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onTestResult","id":"onTestResult1()","comment":"\nCalled when each test is first completed. Useful to show intermediate\nprogress on a test suite.\n","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"}],"line":"57"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onTestResultChanged","id":"onTestResultChanged1()","comment":"\nCalled when an already completed test changes state. For example: a test\nthat was marked as passing may later be marked as being in error because\nit still had callbacks being invoked.\n","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"}],"line":"64"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onLogMessage","id":"onLogMessage2()","comment":"\nHandles the logging of messages by a test case.\n","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"}],"line":"69"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onDone","id":"onDone1()","comment":"\nCalled when the unittest framework is done running. [success] indicates\nwhether all tests passed successfully.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"success","id":"success"}],"line":"75"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onSummary","id":"onSummary5()","comment":"\nCalled with the result of all test cases. Browser tests commonly override\nthis to reformat the output.\n\nWhen [uncaughtError] is not null, it contains an error that occured outside\nof tests (e.g. setting up the test).\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"passed","id":"passed"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"failed","id":"failed"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"errors","id":"errors"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"TestCase","refId":"unittest/TestCase"}]},"kind":"param","name":"results","id":"results"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"uncaughtError","id":"uncaughtError","line":"85"}],"line":"84"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"autoStart","id":"autoStart","comment":"\nIf [:true:], tests are started automatically. Otherwise [runTests]\nmust be called explicitly after tests are set up.\n","line":"29"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"variable","name":"timeout","id":"timeout","comment":"How long a [TestCase] can run before it is considered an error.\nA [timeout] value of [:null:] means that the limit is infinite.","line":"33"},{"returnType":{"name":"Configuration","refId":"unittest/Configuration"},"kind":"constructor","name":"","id":"0()","comment":"\nCreates an instance of [SimpleConfiguration].\n","line":"16"},{"kind":"constructor","name":"blank","id":"blank0()","comment":"\nCreates an [Configuration] instances that does nothing.\n\nFor use by subclasses which wish to implement only a subset of features.\n","line":"23"}],"uri":"package:unittest/src/configuration.dart","line":"11"}],"uri":"package:unittest/unittest.dart","line":"136"},{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"file:///Users/kevmoo/.homebrew/Cellar/dart-editor/31918/dart-sdk/lib/core/object.dart","line":"21"}],"uri":"file:///Users/kevmoo/.homebrew/Cellar/dart-editor/31918/dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","id":"hop_tasks.unit_test","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_indent","id":"_indent1()","comment":"Indent each line in [str] by two spaces. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"isPrivate":true,"line":"194"},{"returnType":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"method","name":"_unittestParserConfig","id":"_unittestParserConfig0()","isPrivate":true,"line":"67"},{"returnType":{"name":"Task","refId":"hop.core/Task"},"kind":"method","name":"createUnitTestTask","id":"createUnitTestTask2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"unitTestAction","id":"unitTestAction","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"Configuration","refId":"unittest/Configuration"},"kind":"param","name":"config","id":"config","uri":"file:///Users/kevmoo/source/github/hop.dart/lib/src/hop_tasks/unit_test.dart","line":"16"}],"uri":"file:///Users/kevmoo/.homebrew/Cellar/dart-editor/31918/dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"defaultValue":"const Duration(seconds:20)","isOptional":true,"isNamed":true,"kind":"param","name":"timeout","id":"timeout","line":"17"}],"line":"16"},{"kind":"variable","name":"_FILTER_ARG","id":"_FILTER_ARG","isPrivate":true,"line":"14"},{"kind":"variable","name":"_SUMMARY_ERROR","id":"_SUMMARY_ERROR","isPrivate":true,"line":"13"},{"kind":"variable","name":"_SUMMARY_PASS","id":"_SUMMARY_PASS","isPrivate":true,"line":"12"},{"kind":"variable","name":"_SUMARY_FAIL","id":"_SUMARY_FAIL","isPrivate":true,"line":"11"},{"kind":"variable","name":"_SUMMARY_ALL","id":"_SUMMARY_ALL","isPrivate":true,"line":"10"},{"kind":"variable","name":"_SUMMARY_FLAG","id":"_SUMMARY_FLAG","isPrivate":true,"line":"9"},{"kind":"variable","name":"_LIST_FLAG","id":"_LIST_FLAG","isPrivate":true,"line":"8"},{"superclass":{"name":"Configuration","refId":"unittest/Configuration"},"kind":"class","name":"_HopTestConfiguration","id":"_HopTestConfiguration","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onInit","id":"onInit0()","line":"93"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onStart","id":"onStart0()","line":"98"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onTestStart","id":"onTestStart1()","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase","line":"104"}],"line":"103"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onLogMessage","id":"onLogMessage2()","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase","line":"109"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message","line":"109"}],"line":"108"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onTestResult","id":"onTestResult1()","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase","line":"120"}],"line":"119"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onTestResultChanged","id":"onTestResultChanged1()","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase","line":"140"}],"line":"139"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onSummary","id":"onSummary5()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"passed","id":"passed","line":"149"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"failed","id":"failed","line":"149"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"errors","id":"errors","line":"149"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"TestCase","refId":"unittest/TestCase"}]},"kind":"param","name":"results","id":"results","line":"149"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"uncaughtError","id":"uncaughtError","line":"150"}],"line":"148"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onDone","id":"onDone1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"success","id":"success","line":"184"}],"line":"183"},{"ref":{"name":"Future","refId":"dart.async/Future"},"kind":"property","name":"future","id":"future","line":"89"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"autoStart","id":"autoStart","line":"91"},{"ref":{"name":"Completer","refId":"dart.async/Completer","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"isFinal":true,"kind":"variable","name":"_completer","id":"_completer","isPrivate":true,"line":"79"},{"ref":{"name":"TaskContext","refId":"hop.core/TaskContext"},"isFinal":true,"kind":"variable","name":"_context","id":"_context","isPrivate":true,"line":"80"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"failSummary","id":"failSummary","line":"81"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"passSummary","id":"passSummary","line":"82"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"errorSummary","id":"errorSummary","line":"83"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"isFinal":true,"kind":"variable","name":"timeout","id":"timeout","line":"84"},{"kind":"constructor","name":"","id":"5()","children":[{"ref":{"name":"TaskContext","refId":"hop.core/TaskContext"},"initializedField":{"name":"_context","refId":"hop_tasks.unit_test/_HopTestConfiguration/_context"},"kind":"param","name":"_context","id":"_context","isPrivate":true},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"failSummary","refId":"hop_tasks.unit_test/_HopTestConfiguration/failSummary"},"kind":"param","name":"failSummary","id":"failSummary"},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"passSummary","refId":"hop_tasks.unit_test/_HopTestConfiguration/passSummary"},"kind":"param","name":"passSummary","id":"passSummary"},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"errorSummary","refId":"hop_tasks.unit_test/_HopTestConfiguration/errorSummary"},"kind":"param","name":"errorSummary","id":"errorSummary"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"initializedField":{"name":"timeout","refId":"hop_tasks.unit_test/_HopTestConfiguration/timeout"},"kind":"param","name":"timeout","id":"timeout"}],"line":"86"}],"isPrivate":true,"line":"78"}],"uri":"file:///Users/kevmoo/source/github/hop.dart/lib/src/hop_tasks/unit_test.dart","line":"1"}