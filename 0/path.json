{"dependencies":[{"uri":"file:///usr/local/Cellar/dart-editor/24898/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"file:///usr/local/Cellar/dart-editor/24898/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"comment":"A comprehensive, cross-platform path manipulation library.\n\n## Installing ##\n\nUse [pub][] to install this package. Add the following to your\n`pubspec.yaml` file.\n\n    dependencies:\n      pathos: any\n\nThen run `pub install`.\n\nFor more information, see the\n[pathos package on pub.dartlang.org][pkg].\n\n[pub]: http://pub.dartlang.org\n[pkg]: http://pub.dartlang.org/packages/pathos","uri":"package:pathos/path.dart","name":"package:pathos/path.dart","id":"path","children":[{"comment":"Validates that there are no non-null arguments following a null one and\nthrows an appropriate [ArgumentError] on failure.","name":"_validateArgList","isPrivate":true,"id":"_validateArgList2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"method","id":"method","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"args","id":"args","kind":"param"}],"line":"319","kind":"method"},{"returnType":{"refId":"dart.core/Uri","name":"Uri"},"comment":"Returns the URI that represents [path].\n\nFor POSIX and Windows styles, this will return a `file:` URI. For the URL\nstyle, this will just convert [path] to a [Uri].\n\nThis will always convert relative paths to absolute ones before converting\nto a URI.\n\n    // POSIX\n    path.toUri('/path/to/foo')\n      // -> Uri.parse('file:///path/to/foo')\n\n    // Windows\n    path.toUri(r'C:\\path\\to\\foo')\n      // -> Uri.parse('file:///C:/path/to/foo')\n\n    // URL\n    path.toUri('http://dartlang.org/path/to/foo')\n      // -> Uri.parse('http://dartlang.org/path/to/foo')","name":"toUri","id":"toUri1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"315","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Returns the path represented by [uri].\n\nFor POSIX and Windows styles, [uri] must be a `file:` URI. For the URL\nstyle, this will just convert [uri] to a string.\n\n    // POSIX\n    path.fromUri(Uri.parse('file:///path/to/foo'))\n      // -> '/path/to/foo'\n\n    // Windows\n    path.fromUri(Uri.parse('file:///C:/path/to/foo'))\n      // -> r'C:\\path\\to\\foo'\n\n    // URL\n    path.fromUri(Uri.parse('http://dartlang.org/path/to/foo'))\n      // -> 'http://dartlang.org/path/to/foo'","name":"fromUri","id":"fromUri1()","children":[{"ref":{"refId":"dart.core/Uri","name":"Uri"},"name":"uri","id":"uri","kind":"param"}],"line":"294","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Removes a trailing extension from the last part of [path].\n\n    withoutExtension('path/to/foo.dart'); // -> 'path/to/foo'","name":"withoutExtension","id":"withoutExtension1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"276","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Attempts to convert [path] to an equivalent relative path from the current\ndirectory.\n\n    // Given current directory is /root/path:\n    path.relative('/root/path/a/b.dart'); // -> 'a/b.dart'\n    path.relative('/root/other.dart'); // -> '../other.dart'\n\nIf the [from] argument is passed, [path] is made relative to that instead.\n\n    path.relative('/root/path/a/b.dart',\n        from: '/root/path'); // -> 'a/b.dart'\n    path.relative('/root/other.dart',\n        from: '/root/path'); // -> '../other.dart'\n\nSince there is no relative path from one drive letter to another on Windows,\nor from one hostname to another for URLs, this will return an absolute path\nin those cases.\n\n    // Windows\n    path.relative(r'D:\\other', from: r'C:\\home'); // -> 'D:\\other'\n\n    // URL\n    path.relative('http://dartlang.org', from: 'http://pub.dartlang.org');\n      // -> 'http://dartlang.org'","name":"relative","id":"relative2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"from","id":"from","kind":"param"}],"line":"270","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Normalizes [path], simplifying it by handling `..`, and `.`, and\nremoving redundant path separators whenever possible.\n\n    path.normalize('path/./to/..//file.text'); // -> 'path/file.txt'","name":"normalize","id":"normalize1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"244","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"Splits [path] into its components using the current platform's [separator].\n\n    path.split('path/to/foo'); // -> ['path', 'to', 'foo']\n\nThe path will *not* be normalized before splitting.\n\n    path.split('path/../foo'); // -> ['path', '..', 'foo']\n\nIf [path] is absolute, the root directory will be the first element in the\narray. Example:\n\n    // Unix\n    path.split('/path/to/foo'); // -> ['/', 'path', 'to', 'foo']\n\n    // Windows\n    path.split(r'C:\\path\\to\\foo'); // -> [r'C:\\', 'path', 'to', 'foo']\n\n    // Browser\n    path.split('http://dartlang.org/path/to/foo');\n      // -> ['http://dartlang.org', 'path', 'to', 'foo']","name":"split","id":"split1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"238","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Joins the given path parts into a single path using the current platform's\n[separator]. Example:\n\n    path.joinAll(['path', 'to', 'foo']); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    path.joinAll(['path/', 'to', 'foo']); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    path.joinAll(['path', '/to', 'foo']); // -> '/to/foo'\n\nFor a fixed number of parts, [join] is usually terser.","name":"joinAll","id":"joinAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Iterable"},"name":"parts","id":"parts","kind":"param"}],"line":"215","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Joins the given path parts into a single path using the current platform's\n[separator]. Example:\n\n    path.join('path', 'to', 'foo'); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    path.join('path/', 'to', 'foo'); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    path.join('path', '/to', 'foo'); // -> '/to/foo'","name":"join","id":"join8()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"part1","id":"part1","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part2","id":"part2","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part3","id":"part3","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part4","id":"part4","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part5","id":"part5","line":"197","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part6","id":"part6","line":"197","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part7","id":"part7","line":"197","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part8","id":"part8","line":"197","kind":"param"}],"line":"196","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns `true` if [path] is a root-relative path and `false` if it's not.\n\nURLs that start with `/` are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are still\nabsolute in every other sense, [isAbsolute] will return true for them. They\ncan be detected using [isRootRelative].\n\nNo POSIX and Windows paths are root-relative.","name":"isRootRelative","id":"isRootRelative1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"181","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns `true` if [path] is a relative path and `false` if it is absolute.\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`.","name":"isRelative","id":"isRelative1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"171","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns `true` if [path] is an absolute path and `false` if it is a\nrelative path.\n\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`. For URLs, absolute paths either start with a protocol and\noptional hostname (e.g. `http://dartlang.org`, `file://`) or with a `/`.\n\nURLs that start with `/` are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are still\nabsolute in every other sense, [isAbsolute] will return true for them. They\ncan be detected using [isRootRelative].","name":"isAbsolute","id":"isAbsolute1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"165","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Returns the root of [path], if it's absolute, or the empty string if it's\nrelative.\n\n    // Unix\n    path.rootPrefix('path/to/foo'); // -> ''\n    path.rootPrefix('/path/to/foo'); // -> '/'\n\n    // Windows\n    path.rootPrefix(r'path\\to\\foo'); // -> ''\n    path.rootPrefix(r'C:\\path\\to\\foo'); // -> r'C:\\'\n\n    // URL\n    path.rootPrefix('path/to/foo'); // -> ''\n    path.rootPrefix('http://dartlang.org/path/to/foo');\n      // -> 'http://dartlang.org'","name":"rootPrefix","id":"rootPrefix1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"151","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the file extension of [path]: the portion of [basename] from the last\n`.` to the end (including the `.` itself).\n\n    path.extension('path/to/foo.dart');    // -> '.dart'\n    path.extension('path/to/foo');         // -> ''\n    path.extension('path.to/foo');         // -> ''\n    path.extension('path/to/foo.dart.js'); // -> '.js'\n\nIf the file name starts with a `.`, then that is not considered the\nextension:\n\n    path.extension('~/.bashrc');    // -> ''\n    path.extension('~/.notes.txt'); // -> '.txt'","name":"extension","id":"extension1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"133","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the part of [path] before the last separator.\n\n    path.dirname('path/to/foo.dart'); // -> 'path/to'\n    path.dirname('path/to');          // -> 'to'\n\nTrailing separators are ignored.\n\n    builder.dirname('path/to/'); // -> 'path'","name":"dirname","id":"dirname1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"118","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the part of [path] after the last separator, and without any trailing\nfile extension.\n\n    path.basenameWithoutExtension('path/to/foo.dart'); // -> 'foo'\n\nTrailing separators are ignored.\n\n    builder.basenameWithoutExtension('path/to/foo.dart/'); // -> 'foo'","name":"basenameWithoutExtension","id":"basenameWithoutExtension1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"107","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the part of [path] after the last separator.\n\n    path.basename('path/to/foo.dart'); // -> 'foo.dart'\n    path.basename('path/to');          // -> 'to'\n\nTrailing separators are ignored.\n\n    builder.basename('path/to/'); // -> 'to'","name":"basename","id":"basename1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"97","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Converts [path] to an absolute path by resolving it relative to the current\nworking directory. If [path] is already an absolute path, just returns it.\n\n    path.absolute('foo/bar.txt'); // -> /your/current/dir/foo/bar.txt","name":"absolute","id":"absolute1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"87","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the path separator for the current platform. On Mac and Linux, this\nis `/`. On Windows, it's `\\`.","name":"separator","id":"separator0()","line":"81","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the path to the current working directory.\n\nIn the browser, this means the current URL. When using dart2js, this\ncurrently returns `.` due to technical constraints. In the future, it will\nreturn the current URL.","name":"current","id":"current0()","line":"67","kind":"method"},{"returnType":{"refId":"dart.mirrors/LibraryMirror","name":"LibraryMirror"},"comment":"If we're running in Dartium, this will return a [LibraryMirror] that gives\naccess to the `dart:html` library.\n\nIf `dart:html` is not available, this returns null.","name":"_html","isPrivate":true,"id":"_html0()","line":"54","kind":"method"},{"returnType":{"refId":"dart.mirrors/LibraryMirror","name":"LibraryMirror"},"comment":"If we're running in the server-side Dart VM, this will return a\n[LibraryMirror] that gives access to the `dart:io` library.\n\nIf `dart:io` is not available, this returns null.","name":"_io","isPrivate":true,"id":"_io0()","line":"41","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nInserts [length] elements in front of the [list] and fills them with the\n[fillValue].\n","name":"_growListFront","isPrivate":true,"id":"_growListFront3()","children":[{"ref":{"refId":"dart.core/List","name":"List"},"name":"list","id":"list","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"},{"name":"fillValue","id":"fillValue","kind":"param"}],"line":"34","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Gets the path separator for the current platform. On Mac and Linux, this\nis `/`. On Windows, it's `\\`.","name":"separator","id":"separator","line":"81","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Gets the path to the current working directory.\n\nIn the browser, this means the current URL. When using dart2js, this\ncurrently returns `.` due to technical constraints. In the future, it will\nreturn the current URL.","name":"current","id":"current","line":"67","kind":"property"},{"ref":{"refId":"dart.mirrors/LibraryMirror","name":"LibraryMirror"},"comment":"If we're running in Dartium, this will return a [LibraryMirror] that gives\naccess to the `dart:html` library.\n\nIf `dart:html` is not available, this returns null.","name":"_html","isPrivate":true,"id":"_html","line":"54","kind":"property"},{"ref":{"refId":"dart.mirrors/LibraryMirror","name":"LibraryMirror"},"comment":"If we're running in the server-side Dart VM, this will return a\n[LibraryMirror] that gives access to the `dart:io` library.\n\nIf `dart:io` is not available, this returns null.","name":"_io","isPrivate":true,"id":"_io","line":"41","kind":"property"},{"isFinal":true,"comment":"An internal builder for the current OS so we can provide a straight\nfunctional interface and not require users to create one.","name":"_builder","isPrivate":true,"id":"_builder","line":"28","kind":"variable"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"name":"_ParsedPath","isPrivate":true,"id":"_ParsedPath","children":[{"returnType":{"refId":"void","name":"void"},"name":"removeTrailingSeparators","id":"removeTrailingSeparators0()","line":"1052","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"normalize","id":"normalize0()","line":"1060","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"1108","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"Splits the last part of the path into a two-element list. The first is\nthe name of the file without any extension. The second is the extension\nor \"\" if it has none.","name":"_splitExtension","isPrivate":true,"id":"_splitExtension0()","line":"1123","kind":"method"},{"returnType":{"refId":"path/_ParsedPath","name":"_ParsedPath"},"name":"clone","id":"clone0()","line":"1138","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"The file extension of the last part, or \"\" if it doesn't have one.","name":"extension","id":"extension","line":"1028","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"`true` if this is an absolute path.","name":"isAbsolute","id":"isAbsolute","line":"1031","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"basename","id":"basename","line":"1036","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"basenameWithoutExtension","id":"basenameWithoutExtension","line":"1043","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"hasTrailingSeparator","id":"hasTrailingSeparator","line":"1050","kind":"property"},{"ref":{"refId":"path/Style","name":"Style"},"comment":"The [Style] that was used to parse this path.","name":"style","id":"style","line":"1003","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"The absolute root portion of the path, or `null` if the path is relative.\nOn POSIX systems, this will be `null` or \"/\". On Windows, it can be\n`null`, \"//\" for a UNC path, or something like \"C:\\\" for paths with drive\nletters.","name":"root","id":"root","line":"1009","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether this path is root-relative.\n\nSee [Builder.isRootRelative].","name":"isRootRelative","id":"isRootRelative","line":"1014","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"The path-separated parts of the path. All but the last will be\ndirectories.","name":"parts","id":"parts","line":"1018","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"The path separators preceding each part.\n\nThe first one will be an empty string unless the root requires a separator\nbetween it and the path. The last one will be an empty string unless the\npath ends with a trailing separator.","name":"separators","id":"separators","line":"1025","kind":"variable"},{"name":"_ParsedPath","id":"_ParsedPath5()","children":[{"initializedField":{"refId":"path/_ParsedPath/style","name":"style"},"ref":{"refId":"path/Style","name":"Style"},"name":"style","id":"style","kind":"param"},{"initializedField":{"refId":"path/_ParsedPath/root","name":"root"},"ref":{"refId":"dart.core/String","name":"String"},"name":"root","id":"root","kind":"param"},{"initializedField":{"refId":"path/_ParsedPath/isRootRelative","name":"isRootRelative"},"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isRootRelative","id":"isRootRelative","kind":"param"},{"initializedField":{"refId":"path/_ParsedPath/parts","name":"parts"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"parts","id":"parts","kind":"param"},{"initializedField":{"refId":"path/_ParsedPath/separators","name":"separators"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"separators","id":"separators","line":"1034","kind":"param"}],"line":"1033","kind":"constructor"}],"line":"1001","kind":"class"},{"superclass":{"refId":"path/Style","name":"Style"},"comment":"The style for URL paths.","name":"_UrlStyle","isPrivate":true,"id":"_UrlStyle","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"pathFromUri","id":"pathFromUri1()","children":[{"ref":{"refId":"dart.core/Uri","name":"Uri"},"name":"uri","id":"uri","kind":"param"}],"line":"995","kind":"method"},{"returnType":{"refId":"dart.core/Uri","name":"Uri"},"name":"pathToUri","id":"pathToUri1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"997","kind":"method"},{"isFinal":true,"name":"name","id":"name","line":"987","kind":"variable"},{"isFinal":true,"name":"separator","id":"separator","line":"988","kind":"variable"},{"isFinal":true,"name":"separatorPattern","id":"separatorPattern","line":"989","kind":"variable"},{"isFinal":true,"name":"needsSeparatorPattern","id":"needsSeparatorPattern","line":"990","kind":"variable"},{"isFinal":true,"name":"rootPattern","id":"rootPattern","line":"992","kind":"variable"},{"isFinal":true,"name":"relativeRootPattern","id":"relativeRootPattern","line":"993","kind":"variable"},{"name":"_UrlStyle","id":"_UrlStyle0()","line":"985","kind":"constructor"}],"line":"984","kind":"class"},{"superclass":{"refId":"path/Style","name":"Style"},"comment":"The style for Windows paths.","name":"_WindowsStyle","isPrivate":true,"id":"_WindowsStyle","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"pathFromUri","id":"pathFromUri1()","children":[{"ref":{"refId":"dart.core/Uri","name":"Uri"},"name":"uri","id":"uri","kind":"param"}],"line":"927","kind":"method"},{"returnType":{"refId":"dart.core/Uri","name":"Uri"},"name":"pathToUri","id":"pathToUri1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"944","kind":"method"},{"isFinal":true,"isStatic":true,"name":"_builder","isPrivate":true,"id":"_builder","line":"919","kind":"variable"},{"isFinal":true,"name":"name","id":"name","line":"921","kind":"variable"},{"isFinal":true,"name":"separator","id":"separator","line":"922","kind":"variable"},{"isFinal":true,"name":"separatorPattern","id":"separatorPattern","line":"923","kind":"variable"},{"isFinal":true,"name":"needsSeparatorPattern","id":"needsSeparatorPattern","line":"924","kind":"variable"},{"isFinal":true,"name":"rootPattern","id":"rootPattern","line":"925","kind":"variable"},{"name":"_WindowsStyle","id":"_WindowsStyle0()","line":"917","kind":"constructor"}],"line":"916","kind":"class"},{"superclass":{"refId":"path/Style","name":"Style"},"comment":"The style for POSIX paths.","name":"_PosixStyle","isPrivate":true,"id":"_PosixStyle","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"pathFromUri","id":"pathFromUri1()","children":[{"ref":{"refId":"dart.core/Uri","name":"Uri"},"name":"uri","id":"uri","kind":"param"}],"line":"890","kind":"method"},{"returnType":{"refId":"dart.core/Uri","name":"Uri"},"name":"pathToUri","id":"pathToUri1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"897","kind":"method"},{"isFinal":true,"isStatic":true,"name":"_builder","isPrivate":true,"id":"_builder","line":"882","kind":"variable"},{"isFinal":true,"name":"name","id":"name","line":"884","kind":"variable"},{"isFinal":true,"name":"separator","id":"separator","line":"885","kind":"variable"},{"isFinal":true,"name":"separatorPattern","id":"separatorPattern","line":"886","kind":"variable"},{"isFinal":true,"name":"needsSeparatorPattern","id":"needsSeparatorPattern","line":"887","kind":"variable"},{"isFinal":true,"name":"rootPattern","id":"rootPattern","line":"888","kind":"variable"},{"name":"_PosixStyle","id":"_PosixStyle0()","line":"880","kind":"constructor"}],"line":"879","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"An enum type describing a \"flavor\" of path.","name":"Style","id":"Style","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the root prefix of [path] if path is absolute. If [path] is relative,\nreturns `null`.","name":"getRoot","id":"getRoot1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"850","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the root prefix of [path] if it's root-relative.\n\nIf [path] is relative or absolute and not root-relative, returns `null`.","name":"getRelativeRoot","id":"getRelativeRoot1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"859","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Returns the path represented by [uri] in this style.","name":"pathFromUri","id":"pathFromUri1()","children":[{"ref":{"refId":"dart.core/Uri","name":"Uri"},"name":"uri","id":"uri","kind":"param"}],"line":"867","kind":"method"},{"returnType":{"refId":"dart.core/Uri","name":"Uri"},"comment":"Returns the URI that represents [path].\n\nPathos will always path an absolute path for [path]. Relative paths are\nhandled automatically by [Builder].","name":"pathToUri","id":"pathToUri1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"873","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"875","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"The name of this path style. Will be \"posix\" or \"windows\".","name":"name","id":"name","line":"816","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"The path separator for this style. On POSIX, this is `/`. On Windows,\nit's `\\`.","name":"separator","id":"separator","line":"820","kind":"property"},{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"comment":"The [Pattern] that can be used to match a separator for a path in this\nstyle. Windows allows both \"/\" and \"\\\" as path separators even though \"\\\"\nis the canonical one.","name":"separatorPattern","id":"separatorPattern","line":"825","kind":"property"},{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"comment":"The [Pattern] that matches path components that need a separator after\nthem.\n\nWindows and POSIX styles just need separators when the previous component\ndoesn't already end in a separator, but the URL always needs to place a\nseparator between the root and the first component, even if the root\nalready ends in a separator character. For example, to join \"file://\" and\n\"usr\", an additional \"/\" is needed (making \"file:///usr\").","name":"needsSeparatorPattern","id":"needsSeparatorPattern","line":"835","kind":"property"},{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"comment":"The [Pattern] that can be used to match the root prefix of an absolute\npath in this style.","name":"rootPattern","id":"rootPattern","line":"839","kind":"property"},{"isFinal":true,"isStatic":true,"comment":"POSIX-style paths use \"/\" (forward slash) as separators. Absolute paths\nstart with \"/\". Used by UNIX, Linux, Mac OS X, and others.","name":"posix","id":"posix","line":"798","kind":"variable"},{"isFinal":true,"isStatic":true,"comment":"Windows paths use \"\\\" (backslash) as separators. Absolute paths start with\na drive letter followed by a colon (example, \"C:\") or two backslashes\n(\"\\\\\") for UNC paths.","name":"windows","id":"windows","line":"805","kind":"variable"},{"isFinal":true,"isStatic":true,"comment":"URLs aren't filesystem paths, but they're supported by Pathos to make it\neasier to manipulate URL paths in the browser.\n\nURLs use \"/\" (forward slash) as separators. Absolute paths either start\nwith a protocol and optional hostname (e.g. `http://dartlang.org`,\n`file://`) or with \"/\".","name":"url","id":"url","line":"813","kind":"variable"},{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"isFinal":true,"comment":"The [Pattern] that can be used to match the root prefix of a root-relative\npath in this style.\n\nThis can be null to indicate that this style doesn't support root-relative\npaths.","name":"relativeRootPattern","id":"relativeRootPattern","line":"846","kind":"variable"}],"line":"795","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"An instantiable class for manipulating paths. Unlike the top-level\nfunctions, this lets you explicitly select what platform the paths will use.","name":"Builder","id":"Builder","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the part of [path] after the last separator on the builder's\nplatform.\n\n    builder.basename('path/to/foo.dart'); // -> 'foo.dart'\n    builder.basename('path/to');          // -> 'to'\n\nTrailing separators are ignored.\n\n    builder.basename('path/to/'); // -> 'to'","name":"basename","id":"basename1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"390","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the part of [path] after the last separator on the builder's\nplatform, and without any trailing file extension.\n\n    builder.basenameWithoutExtension('path/to/foo.dart'); // -> 'foo'\n\nTrailing separators are ignored.\n\n    builder.basenameWithoutExtension('path/to/foo.dart/'); // -> 'foo'","name":"basenameWithoutExtension","id":"basenameWithoutExtension1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"400","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the part of [path] before the last separator.\n\n    builder.dirname('path/to/foo.dart'); // -> 'path/to'\n    builder.dirname('path/to');          // -> 'path'\n\nTrailing separators are ignored.\n\n    builder.dirname('path/to/'); // -> 'path'","name":"dirname","id":"dirname1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"411","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the file extension of [path]: the portion of [basename] from the last\n`.` to the end (including the `.` itself).\n\n    builder.extension('path/to/foo.dart'); // -> '.dart'\n    builder.extension('path/to/foo'); // -> ''\n    builder.extension('path.to/foo'); // -> ''\n    builder.extension('path/to/foo.dart.js'); // -> '.js'\n\nIf the file name starts with a `.`, then it is not considered an\nextension:\n\n    builder.extension('~/.bashrc');    // -> ''\n    builder.extension('~/.notes.txt'); // -> '.txt'","name":"extension","id":"extension1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"437","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Returns the root of [path], if it's absolute, or an empty string if it's\nrelative.\n\n    // Unix\n    builder.rootPrefix('path/to/foo'); // -> ''\n    builder.rootPrefix('/path/to/foo'); // -> '/'\n\n    // Windows\n    builder.rootPrefix(r'path\\to\\foo'); // -> ''\n    builder.rootPrefix(r'C:\\path\\to\\foo'); // -> r'C:\\'\n\n    // URL\n    builder.rootPrefix('path/to/foo'); // -> ''\n    builder.rootPrefix('http://dartlang.org/path/to/foo');\n      // -> 'http://dartlang.org'","name":"rootPrefix","id":"rootPrefix1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"455","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns `true` if [path] is an absolute path and `false` if it is a\nrelative path.\n\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`. For URLs, absolute paths either start with a protocol and\noptional hostname (e.g. `http://dartlang.org`, `file://`) or with a `/`.\n\nURLs that start with `/` are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are\nstill absolute in every other sense, [isAbsolute] will return true for\nthem. They can be detected using [isRootRelative].","name":"isAbsolute","id":"isAbsolute1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"472","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns `true` if [path] is a relative path and `false` if it is absolute.\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`.","name":"isRelative","id":"isRelative1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"478","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns `true` if [path] is a root-relative path and `false` if it's not.\n\nURLs that start with `/` are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are\nstill absolute in every other sense, [isAbsolute] will return true for\nthem. They can be detected using [isRootRelative].\n\nNo POSIX and Windows paths are root-relative.","name":"isRootRelative","id":"isRootRelative1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"488","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Joins the given path parts into a single path. Example:\n\n    builder.join('path', 'to', 'foo'); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    builder.join('path/', 'to', 'foo'); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    builder.join('path', '/to', 'foo'); // -> '/to/foo'\n","name":"join","id":"join8()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"part1","id":"part1","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part2","id":"part2","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part3","id":"part3","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part4","id":"part4","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part5","id":"part5","line":"504","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part6","id":"part6","line":"504","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part7","id":"part7","line":"504","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part8","id":"part8","line":"504","kind":"param"}],"line":"503","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Joins the given path parts into a single path. Example:\n\n    builder.joinAll(['path', 'to', 'foo']); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    builder.joinAll(['path/', 'to', 'foo']); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    builder.joinAll(['path', '/to', 'foo']); // -> '/to/foo'\n\nFor a fixed number of parts, [join] is usually terser.","name":"joinAll","id":"joinAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Iterable"},"name":"parts","id":"parts","kind":"param"}],"line":"524","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"Splits [path] into its components using the current platform's\n[separator]. Example:\n\n    builder.split('path/to/foo'); // -> ['path', 'to', 'foo']\n\nThe path will *not* be normalized before splitting.\n\n    builder.split('path/../foo'); // -> ['path', '..', 'foo']\n\nIf [path] is absolute, the root directory will be the first element in the\narray. Example:\n\n    // Unix\n    builder.split('/path/to/foo'); // -> ['/', 'path', 'to', 'foo']\n\n    // Windows\n    builder.split(r'C:\\path\\to\\foo'); // -> [r'C:\\', 'path', 'to', 'foo']","name":"split","id":"split1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"578","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Normalizes [path], simplifying it by handling `..`, and `.`, and\nremoving redundant path separators whenever possible.\n\n    builder.normalize('path/./to/..//file.text'); // -> 'path/file.txt'","name":"normalize","id":"normalize1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"591","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Creates a new path by appending the given path parts to the [root].\nEquivalent to [join()] with [root] as the first argument. Example:\n\n    var builder = new Builder(root: 'root');\n    builder.resolve('path', 'to', 'foo'); // -> 'root/path/to/foo'","name":"resolve","id":"resolve7()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"part1","id":"part1","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part2","id":"part2","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part3","id":"part3","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part4","id":"part4","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part5","id":"part5","line":"605","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part6","id":"part6","line":"605","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part7","id":"part7","line":"605","kind":"param"}],"line":"604","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Attempts to convert [path] to an equivalent relative path relative to\n[root].\n\n    var builder = new Builder(root: '/root/path');\n    builder.relative('/root/path/a/b.dart'); // -> 'a/b.dart'\n    builder.relative('/root/other.dart'); // -> '../other.dart'\n\nIf the [from] argument is passed, [path] is made relative to that instead.\n\n    builder.relative('/root/path/a/b.dart',\n        from: '/root/path'); // -> 'a/b.dart'\n    builder.relative('/root/other.dart',\n        from: '/root/path'); // -> '../other.dart'\n\nSince there is no relative path from one drive letter to another on\nWindows, this will return an absolute path in that case.\n\n    builder.relative(r'D:\\other', from: r'C:\\other'); // -> 'D:\\other'\n\nThis will also return an absolute path if an absolute [path] is passed to\na builder with a relative [root].\n\n    var builder = new Builder(r'some/relative/path');\n    builder.relative(r'/absolute/path'); // -> '/absolute/path'","name":"relative","id":"relative2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"from","id":"from","kind":"param"}],"line":"633","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Removes a trailing extension from the last part of [path].\n\n    builder.withoutExtension('path/to/foo.dart'); // -> 'path/to/foo'","name":"withoutExtension","id":"withoutExtension1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"702","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Returns the path represented by [uri].\n\nFor POSIX and Windows styles, [uri] must be a `file:` URI. For the URL\nstyle, this will just convert [uri] to a string.\n\n    // POSIX\n    builder.fromUri(Uri.parse('file:///path/to/foo'))\n      // -> '/path/to/foo'\n\n    // Windows\n    builder.fromUri(Uri.parse('file:///C:/path/to/foo'))\n      // -> r'C:\\path\\to\\foo'\n\n    // URL\n    builder.fromUri(Uri.parse('http://dartlang.org/path/to/foo'))\n      // -> 'http://dartlang.org/path/to/foo'","name":"fromUri","id":"fromUri1()","children":[{"ref":{"refId":"dart.core/Uri","name":"Uri"},"name":"uri","id":"uri","kind":"param"}],"line":"731","kind":"method"},{"returnType":{"refId":"dart.core/Uri","name":"Uri"},"comment":"Returns the URI that represents [path].\n\nFor POSIX and Windows styles, this will return a `file:` URI. For the URL\nstyle, this will just convert [path] to a [Uri].\n\n    // POSIX\n    builder.toUri('/path/to/foo')\n      // -> Uri.parse('file:///path/to/foo')\n\n    // Windows\n    builder.toUri(r'C:\\path\\to\\foo')\n      // -> Uri.parse('file:///C:/path/to/foo')\n\n    // URL\n    builder.toUri('http://dartlang.org/path/to/foo')\n      // -> Uri.parse('http://dartlang.org/path/to/foo')","name":"toUri","id":"toUri1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"749","kind":"method"},{"returnType":{"refId":"path/_ParsedPath","name":"_ParsedPath"},"name":"_parse","isPrivate":true,"id":"_parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"757","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Gets the path separator for the builder's [style]. On Mac and Linux,\nthis is `/`. On Windows, it's `\\`.","name":"separator","id":"separator","line":"379","kind":"property"},{"ref":{"refId":"path/Style","name":"Style"},"isFinal":true,"comment":"The style of path that this builder works with.","name":"style","id":"style","line":"372","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"The root directory that relative paths will be relative to.","name":"root","id":"root","line":"375","kind":"variable"},{"returnType":{"refId":"path/Builder","name":"Builder"},"comment":"Creates a new path builder for the given style and root directory.\n\nIf [style] is omitted, it uses the host operating system's path style. If\n[root] is omitted, it defaults to the current working directory. If [root]\nis relative, it is considered relative to the current working directory.\n\nOn the browser, the path style is [Style.url]. In Dartium, [root] defaults\nto the current URL. When using dart2js, it currently defaults to `.` due\nto technical constraints.","name":"Builder","id":"Builder2()","children":[{"isNamed":true,"ref":{"refId":"path/Style","name":"Style"},"isOptional":true,"name":"style","id":"style","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"root","id":"root","kind":"param"}],"line":"352","kind":"constructor"},{"name":"Builder._","isPrivate":true,"id":"Builder._2()","children":[{"initializedField":{"refId":"path/Builder/style","name":"style"},"ref":{"refId":"path/Style","name":"Style"},"name":"style","id":"style","kind":"param"},{"initializedField":{"refId":"path/Builder/root","name":"root"},"ref":{"refId":"dart.core/String","name":"String"},"name":"root","id":"root","kind":"param"}],"line":"369","kind":"constructor"}],"line":"342","kind":"class"}],"line":"22","kind":"library"}