{"name":"GitDir","qualifiedName":"git/bot_git.GitDir","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"path":{"name":"path","qualifiedName":"git/bot_git.GitDir.path","comment":"","commentFrom":"bot_git.GitDir.path","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"getCommitCount":{"name":"getCommitCount","qualifiedName":"git/bot_git.GitDir.getCommitCount","comment":"","commentFrom":"bot_git.GitDir.getCommitCount","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"branchName":{"name":"branchName","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"HEAD\")","annotations":[]}},"annotations":[]},"getCommit":{"name":"getCommit","qualifiedName":"git/bot_git.GitDir.getCommit","comment":"<p><a>git/bot_git.GitDir.getCommit.rev</a> should probably be a sha1 to a commit.\nBut GIT lets you do other things.\nSee http://git-scm.com/docs/gitrevisions.html</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"git/bot_git.Commit","inner":[]}]}],"parameters":{"rev":{"name":"rev","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getCommits":{"name":"getCommits","qualifiedName":"git/bot_git.GitDir.getCommits","comment":"","commentFrom":"bot_git.GitDir.getCommits","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"git/bot_git.Commit","inner":[]}]}]}],"parameters":{"branchName":{"name":"branchName","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"HEAD\")","annotations":[]}},"annotations":[]},"getBranchNames":{"name":"getBranchNames","qualifiedName":"git/bot_git.GitDir.getBranchNames","comment":"","commentFrom":"bot_git.GitDir.getBranchNames","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}]}],"parameters":{},"annotations":[]},"getBranchReference":{"name":"getBranchReference","qualifiedName":"git/bot_git.GitDir.getBranchReference","comment":"","commentFrom":"bot_git.GitDir.getBranchReference","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"git/bot_git.BranchReference","inner":[]}]}],"parameters":{"branchName":{"name":"branchName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getBranchReferences":{"name":"getBranchReferences","qualifiedName":"git/bot_git.GitDir.getBranchReferences","comment":"","commentFrom":"bot_git.GitDir.getBranchReferences","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"git/bot_git.BranchReference","inner":[]}]}]}],"parameters":{},"annotations":[]},"getTags":{"name":"getTags","qualifiedName":"git/bot_git.GitDir.getTags","comment":"","commentFrom":"bot_git.GitDir.getTags","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"git/bot_git.Tag","inner":[]}]}]}],"parameters":{},"annotations":[]},"showRef":{"name":"showRef","qualifiedName":"git/bot_git.GitDir.showRef","comment":"","commentFrom":"bot_git.GitDir.showRef","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"git/bot_git.CommitReference","inner":[]}]}]}],"parameters":{"heads":{"name":"heads","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"tags":{"name":"tags","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"getCurrentBranch":{"name":"getCurrentBranch","qualifiedName":"git/bot_git.GitDir.getCurrentBranch","comment":"","commentFrom":"bot_git.GitDir.getCurrentBranch","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"git/bot_git.BranchReference","inner":[]}]}],"parameters":{},"annotations":[]},"lsTree":{"name":"lsTree","qualifiedName":"git/bot_git.GitDir.lsTree","comment":"","commentFrom":"bot_git.GitDir.lsTree","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"git/bot_git.TreeEntry","inner":[]}]}]}],"parameters":{"treeish":{"name":"treeish","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"subTreesOnly":{"name":"subTreesOnly","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"path":{"name":"path","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"createOrUpdateBranch":{"name":"createOrUpdateBranch","qualifiedName":"git/bot_git.GitDir.createOrUpdateBranch","comment":"<p>Returns the SHA for the new commit if one is created. <code>null</code> if the branch is not updated.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"branchName":{"name":"branchName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"treeSha":{"name":"treeSha","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"commitMessage":{"name":"commitMessage","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"commitTree":{"name":"commitTree","qualifiedName":"git/bot_git.GitDir.commitTree","comment":"<p>Returns the <code>SHA1</code> for the new commit.</p>\n<p>See <a href=\"http://git-scm.com/docs/git-commit-tree\">git-commit-tree</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"treeSha":{"name":"treeSha","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"commitMessage":{"name":"commitMessage","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"parentCommitShas":{"name":"parentCommitShas","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"writeObjects":{"name":"writeObjects","qualifiedName":"git/bot_git.GitDir.writeObjects","comment":"<p>Given a list of <a>git/bot_git.GitDir.writeObjects.paths</a>, write those files to the object store\nand return a <a>dart-core.Map</a> where the key is the input path and the value is\nthe SHA of the newly written object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}]}],"parameters":{"paths":{"name":"paths","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"runCommand":{"name":"runCommand","qualifiedName":"git/bot_git.GitDir.runCommand","comment":"","commentFrom":"bot_git.GitDir.runCommand","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.ProcessResult","inner":[]}]}],"parameters":{"args":{"name":"args","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]},"throwOnError":{"name":"throwOnError","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"isWorkingTreeClean":{"name":"isWorkingTreeClean","qualifiedName":"git/bot_git.GitDir.isWorkingTreeClean","comment":"","commentFrom":"bot_git.GitDir.isWorkingTreeClean","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]},"populateBranch":{"name":"populateBranch","qualifiedName":"git/bot_git.GitDir.populateBranch","comment":"<p>If the content provided matches the content in the specificed <a>git/bot_git.GitDir.populateBranch.branchName</a>, then\n<code>null</code> is returned.</p>\n<p>If no content is added to the directory, an <a>dart-core.Error</a> is thrown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"git/bot_git.Commit","inner":[]}]}],"parameters":{"branchName":{"name":"branchName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"populator":{"name":"populator","optional":false,"named":false,"default":false,"type":[{"outer":"git/bot_git.PopulateTempDir","inner":[]}],"value":"null","annotations":[]},"commitMessage":{"name":"commitMessage","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"isGitDir":{"name":"isGitDir","qualifiedName":"git/bot_git.GitDir.isGitDir","comment":"","commentFrom":"bot_git.GitDir.isGitDir","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"init":{"name":"init","qualifiedName":"git/bot_git.GitDir.init","comment":"<p><a>git/bot_git.GitDir.init.allowContent</a> if true, doesn't check to see if the directory is empty</p>\n<p>Will fail if the source is a git directory (either at the root or a sub directory)</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"git/bot_git.GitDir","inner":[]}]}],"parameters":{"source":{"name":"source","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.Directory","inner":[]}],"value":"null","annotations":[]},"allowContent":{"name":"allowContent","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"fromExisting":{"name":"fromExisting","qualifiedName":"git/bot_git.GitDir.fromExisting","comment":"","commentFrom":"bot_git.GitDir.fromExisting","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"git/bot_git.GitDir","inner":[]}]}],"parameters":{"gitDirRoot":{"name":"gitDirRoot","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"git/bot_git.GitDir.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>git/bot_git.GitDir.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"git/bot_git.GitDir.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"git/bot_git.GitDir.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>git/bot_git.GitDir.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>git/bot_git.GitDir.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"git/bot_git.GitDir.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"git/bot_git.GitDir.noSuchMethod","comment":"<p><a>git/bot_git.GitDir.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>git/bot_git.GitDir.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>git/bot_git.GitDir.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>git/bot_git.GitDir.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}